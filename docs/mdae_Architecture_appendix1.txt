
------ ADVERTISER -----------------

----- PROBLEM A -------
-----------------------
Some of complexity to deal with the SCALABILITY, bought tokens, the configured tokens by campaigns and the same token type and how to deal with it:
----------------------

- The advertiser has publicity tokens and some of them can be configured as a campaign ready to send to every final user,
so we have to think as in a real case scenario, an advertiser node can have a thousands 20k or more tokens, so doing a search for them on the node
to look for tokens which are configured or not it can be very painful and in terms of resources a very big JSON object generated.

So one solution is when buying tokens those go to one specific address and once the tokens are configured they are going to another address, that way,
we can narrow the space to search(this could be applied to every different kind of publicity token), then let complicate things, every token type,
when configured for a campaign, they can be configured with different parameters, the same token type can be configured on different options on different campaigns,
as the campaign description is embedded on the token state vars, then we could search into the address where configured tokens of specific type are,
for a specific campaign set on the state vars of every token, before launching a campaign to the users, but again, this search can be very huge as on the same
address can be thousands of tokens of the same type but configured for different campaigns.

To narrow even more the search we could split more this classification using an script with the campaign name and the tokenid acting as a selector to send
the configured tokens on different addresses based on this unique script address generated, this last option seems the more efficient and easy to manage.

- Considering a database for managing this classification has some problems:

When search for sending campaigns, the problem with the database to try too classify (organize) all of it, it lends to that the only way to identify a token
for sure it is by its coinid, since using tokenid you don know if the token is configured or not or what campaign does it have, and the coinid when you configure a token
it will be different than when the token was bought, as you send it to yourself changing the state vars to configure it and then the coinid is changing, so you should need to use
newbalance event to detect this new coinid generated and then use the database to register it and classify it, and makes things to manage more complicated.

Another aproach instead of using the coinid to classify the tokens on the database it would be using the same address classification approach thought with the
script, a different address for each campaign name, but that does implies using "getaddress" minima command and that command can return an already used address so
extra checks would be needed..... too complex.

------- SOLUION A ----------
----------------------------
The best, efficient and easy solution to solve the problem is using a script with the token type and campaign name to generate a unique address where to send
the configured tokens, so that way you could locate where the tokens are and then launch a campaign on some of them or all of them only knowing the tokenid and
the campaign name, keeping the number of tokens on an address as low as possible and making the search faster and the response object of it smallest as possible.

So the first time a campaign name is used, a script would be generated and the token type, the address of script and the campaign name will be saved on the database,
when the advertiser want to configure another token, it will search on the database if the campaign name exists, if so, no script is registered and the
script address of the database is used to send the configured tokens to the script address and the amount of tokens on the database is updated as well as when
a campaign is sent to the users, the amount of tokens available is also updated on the database to avoid executing more than one minima node commands and dealing with callbacks.

So the database should save the tokenid, the campaign name, the script address and the amount of tokens available.

Note: To avoid doing extra useless searches on the database, once the Advertiser APP is launched, the database could be loaded as a Javascript Object on a GLOBAL
variable and updating it when changes on the database are done, that way before hitting the database for searches we hit before the global javascript object do
the operation and after that update the database and speed things on.

-------- END SOLUTION A -----
-----------------------------------------------------------------------------------------------------------------------------------------------------------

the problem is not on the response from the DAO, as it would be using maxima to return the results, the problem is the Advertiser, he can also choose the amount of results he wants to or simply save them on his database and then pick up at random, but saving them on the database it makes database not always updated, as imagine a user who register now for receiving publicity on a DAPP and after a few days he unregisterd it or simply uninstalling the DAPP , the API calls automatically to the tracker DAPP and unregister the user to receive that user from that DAPP

El DAO es el que ha de crear els TOKENS, els basics de publicitat i els possible futurs que donguin mes possibilitats i mes opcions als publicistes, aleshores tinc pensat que quan el advertiser s'instala per primera vegada, el que fa es demanar la wallet del DAO i aleshores li demana una operacio de configuracio i el DAO li retorna els tokens de publicitat disponibles (per ara, en un futur podriem tenir oracles i mes opcions), i pel tema del TOKEN que dius, tambe ho havia pensat, crec que hauria de ser el que es fa servir per enviar misatges entre les diferents DAPPS per sincronitzar o enviar ordres, en comptes de enviar una fracció de un minima o els 10 minimes directament per comprar 10 tokens, ho hauriem de fer amb aquest token especial, pero aixo ja seria una versio 2.0, pero el negoci aqui esta en la compra del token i les diferents opcions que pot haver-hi segons el token o funcionalitat que vols comprar(us ilimitat de per vida del token, us limitat per un contador, un sol us.......) i les comisions que el VAULT rebera de lo que cobri cada developer i cada usuari sempre que es visualitzi un token de publicitat.
Pel tema del DAO, ja versio 2.0 , nomes pot fer servir el DAO algu que tingui un token de governança, sino no hauries de poder fer servir el DAO en mode admin.
Tambe es podria afegir un token per inversos, a mode de staking, que en funcio dels beneficis del DAO repartis dividents entre aquests tokens......seria una forma de finançar-se


Script Advertiser 2: Classificate the configured tokens
Send the configured tokens to different wallets determined by the execution of a script, according to the campaign name
and the tokenid.

SCRIPT:
LET tokenid=
LET campaign_name=
RETURN TRUE

runscript script:"LET tokenid=0x1736E20905F0171F18BAC012B613BEAD9F22FE60A54596F61753E0754D4B5D6A LET campaign_name="[TEST_CAMPAIGN]" RETURN TRUE"


#### Enivronment DAO:
java -Xmx1G -jar minima.jar -data edenbase1 -test -nop2p -mdsenable -genesis -clean
java -jar minima.jar -data edenbase1 -test -nop2p -mdsenable

mds action:install file:./DAO-Dapp.mds.zip trust:write

dao address: 0xA4FCF2254D338E46D89D43B56ED93965DBAE65D9BB79E6ABBBBAEF0650615296
dao publickey: 0x806811932E2DD63E3F131C74297730C4A6D7383AA641CA77649E1D974F979B6B
vault publickey 1: 0x01572B0F9523EF161AA072248D7EF3A0B6BEE2AB2669FFF279B688021AD0A6A7
vault publickey 2: 0x7B0D838217E014CFED6F1CA179017275B27B3C858B705D453807F38A71E2B459
vault publickey 3: 0x4D06164B7D0F427E69348561629E6E2BBA80F24454A1A9B7DEF1607CB2260E53
vault address: 0x07C976E497A94C1BCE91FE6002F08C9BB6A6C77E7DCBF2B95EE4783DE2A4035E

TOKENID: 0x690FE488BACC41E7C1EC0x4C96DFB79FEFC2026D4C9C6472C7878B7FAA1D059FE4DE4CF65C50D37AC341A12E54927A20B244172A65ECF006AAD6744237B020E512  YAMATA
TOKENID: 0x2539BFCA418808833281D432ED93C9BEC5E7558DDAF50D564059BB5C34BADB92  CARS
TOKENID: 0xA6E704F390C77E341381480240B77118E67D11AEE40B6A5517F59F05DF832C76 aMDAE
TOKENID: 0x22EF7071BC6C2471F4CC10E102F8648FBD96B40C50BB4CFEFFC7457C5FF787F0 NEW2
script VAULT:0x54C12B5978FDA46D648FEB54127CC6124A14711AEBEA0A7DCB03BF43ED9EA929
-> newscript trackall:true script:"RETURN MULTISIG(2 0xEB192E2BB9D5107B5CFF7AD51E07ECB29FE518EF12508BCE2966AE1E0D48024D 0x3222B40EF130A2B1C01F5A3DAB1DB61A9DDDEE34F09EEE33B50D28633B510730 0x77078928F28814C70889F7D9813C96C2825D60B57BF83499AE6DEBFB0FC145B3)"
"response":{
    "script":"RETURN MULTISIG(2 0xEB192E2BB9D5107B5CFF7AD51E07ECB29FE518EF12508BCE2966AE1E0D48024D 0x3222B40EF130A2B1C01F5A3DAB1DB61A9DDDEE34F09EEE33B50D28633B510730 0x77078928F28814C70889F7D9813C96C2825D60B57BF83499AE6DEBFB0FC145B3)",
    "address":"0x1F4711E9C745895C7C85C35040A0D0973C6657E16479D5F9ECDD697CF4E479DD",
    "miniaddress":"MxG080V8S8UJHQ5H5E7P1E3A10A1K4N7HJ5FZB4F7AVJR6TD5UF9P3PRM2M0PVA",
    "simple":false,
    "default":false,
    "publickey":"0x00",
    "track":true
  }
}


-> tokencreate name:"aMDAE" amount:5000 decimals:0 state:{"0":"0xA51F9F3DF661B9529D8D062C77DC777AB5C8CBD8B9F602B496A91794FF4226EC", "1":"0xEC48E40FB2DA8BEEB5B892276085545969AFBC78DA6888C3C97B1FC396AFF0A5","2":"0x4C2141B21094D2FD08A1EF8C699859584E1B734AA45C21A3D19CD250374BAECA","3":"0xCFCD52617D08174C7E3D27C4D186A9F5D3E17AC7772F07206C58C990A65BDAD8","4":"0x5952FC2561BCE74F9AC3D80F80B759CF6F76256445DA8C1CBAE36A2F726AA818","5":"0x773DC6ABF2083B353A3357E2B9770D45833A8710AAF8A7FB6D8EF326A2489034","6":"0.2","7":"0.2","8":"0.2","9":"1"}

!!! send test !!! to watch if the cahnege back includes state variables

send address:0x69602F027DA9B96971592B44AE2F04B1216E174C3707CFD859F6DFBB849C440D amount:10 tokenid:0x7F21AF36B58BB7268D0D9DBFE134DA0044A95A7ED19FB1B0CD5FEFBA3BF722C8 state:{"0":"0xEF11D8E7DAF5E8358BB6AF41D235EB5B7295CDDC438DB1C5DAD7083E859F6C65", "1":"0x63B3BB4398910ADA5FC55878FCB525102FEBB798013CD58BB5CB94E2564198F7","2":"0x4C2141B21094D2FD08A1EF8C699859584E1B734AA45C21A3D19CD250374BAECA","3":"0x42218693957B5C08F479A698873CF5662C6990EB131D0FC4EEFC7E4CFBA58679","4":"0x5952FC2561BCE74F9AC3D80F80B759CF6F76256445DA8C1CBAE36A2F726AA818","5":"0x1D4E6E972230C73E957D25427045DFE810F652B86B6558B4306F54E0B31F5A1B","6":"0.2","7":"0.2","8":"0.2","9":"1","99":"[MADE---2]","100":"[MDAE]"}


### Environment ADVERTISER:
->java -Xmx1G -jar minima.jar -data edenbase2 -test -nop2p -port 10001 -connect 127.0.0.1:9001 -mdsenable -clean
->java -jar minima.jar -data edenbase2 -test -nop2p -port 10001 -connect 127.0.0.1:9001 -mdsenable

mds action:install file:./Advertiser-Dapp.mds.zip trust:write


// get them from the app Advertiser once started
Buyer address: 0xF3598F302807EA5D6573751E76B9C0177CD6905FD7FBED2C04DFAC381F3BB783
Buyer publickey: 0xB6EF5242E6AB83591CA914ED82E119CDAC6EB1314D18BF1A75A5194AFF09D62B





-Send 10 tokens to advertiser (buyer) with all state variables set from the DAO side

  send address:0x66C093946AF35956F811B48CC012394864F4F12FAA166727FF48685628E02996 amount:10 tokenid:0xFA150FF966F7B0BEFC034EB5A96B1FD709FDECF59B65D672B75BA71DC4289134  state:{"0":"0xA51F9F3DF661B9529D8D062C77DC777AB5C8CBD8B9F602B496A91794FF4226EC", "1":"0xEC48E40FB2DA8BEEB5B892276085545969AFBC78DA6888C3C97B1FC396AFF0A5","2":"0x4C2141B21094D2FD08A1EF8C699859584E1B734AA45C21A3D19CD250374BAECA","3":"0xCFCD52617D08174C7E3D27C4D186A9F5D3E17AC7772F07206C58C990A65BDAD8","4":"0x1A3FDB2A743456B7745C0874761B4B6FC8BFC5B2E2F6818830DC5A3807E28480","5":"0x773DC6ABF2083B353A3357E2B9770D45833A8710AAF8A7FB6D8EF326A2489034","6":"10","7":"10","8":"0","9":"1","10":"0x69602F027DA9B96971592B44AE2F04B1216E174C3707CFD859F6DFBB849C440D","11":"10","12":"0x310494C73414A9DD398BD9E11D30E9963D8C9ECFA15F96C79E3142B8B34EA533"}



Buy tokens to the DAO from the advertiser side
send address:0x5952FC2561BCE74F9AC3D80F80B759CF6F76256445DA8C1CBAE36A2F726AA818 amount:100 tokenid:0x00 state:{"0":"BUY","1":"0x8CB0ED3FFA956E82F06833A83DAEE03C6A0AFA2B298E88E850BDC89D27B24578","2":"0xFA150FF966F7B0BEFC034EB5A96B1FD709FDECF59B65D672B75BA71DC4289134","3":"100","4":"0xA691479E310FA13E32FCFC57DA04FF4DCF2EC0A92705D3D2531F51387645E83D"}

Configure Campaing:
campaing address: 0xF0976BC223ECB75BE6EB133B4AE4CCD846C390B2C26570AEB1046CB402694B4D
campaing name:  [TEST2]
campaing token: 0xFA150FF966F7B0BEFC034EB5A96B1FD709FDECF59B65D672B75BA71DC4289134




### Environment final user:

->java -Xmx1G -jar minima.jar -data edenbase3 -test -nop2p -port 11001 -connect 127.0.0.1:9001 -mdsenable -clean
->java -jar minima.jar -data edenbase3 -test -nop2p -port 11001 -connect 127.0.0.1:9001 -mdsenable

mds action:install file:./show_publicity_dapp.mds.zip trust:write

User wallet: 0xE5D5A9BB7740BA7B667A8E1320D579F64EFFD28F2804CA276F0C5B5B12354EF5

getaddress
{
  "command":"getaddress",
  "status":true,
  "pending":false,
  "response":[{
  "script":"RETURN SIGNEDBY(0xFB6EFDA3E69665C8CE9311459F845A3F3E0EBE796CE0D6B2053F6105D84D8BE4)",
   "address":"0xE5D5A9BB7740BA7B667A8E1320D579F64EFFD28F2804CA276F0C5B5B12354EF5",
   "miniaddress":"MxG0875QMKRMTQ0N9TMCUKE2CGDAUFM9RVT53P80J52ERZCBDDH4DAEUM91UZB5",
   "simple":true,
   "default":true,
   "publickey":"0xFB6EFDA3E69665C8CE9311459F845A3F3E0EBE796CE0D6B2053F6105D84D8BE4",
   "track":true

  },

}


Developer Wallet: 0x75268F13E48B21D57CD34AE11EBD2DE3E81804D30861CE31A65EB71625C8C082

getaddress
{
  "command":"getaddress",
  "status":true,
  "pending":false,
  "response":{
  "script":"RETURN SIGNEDBY(0xA3BEFDC46256D4487569F15900EC10D419D2D1C48AB714947A3FF732811C2FA7)",
    "address":"0x75268F13E48B21D57CD34AE11EBD2DE3E81804D30861CE31A65EB71625C8C082",
    "miniaddress":"MxG083Y4Q7H7P4B47ANPKQAS4FBQBF3T0C09KZ8C77339WUMSB2BW60GAEU3N2R",
    "simple":true,
    "default":true,
    "publickey":"0xA3BEFDC46256D4487569F15900EC10D419D2D1C48AB714947A3FF732811C2FA7",
    "track":true


}







#### Environment TRACKER DAPP

->java -Xmx1G -jar minima.jar -data edenbase4 -test -nop2p -port 12001 -connect 127.0.0.1:9001 -mdsenable

mds action:install file:./TRACKER-Dapp.mds.zip trust:write



<h1><b>This is a TEXT CAPAIGN</b></h1>
this is a line 1
<div align=center><h2><b>this is a textarea 4</b></h2></div>
One
</br>
Two
</br>
Three
</br>
style="color:blue;font-size:46px;"

<div style="background:green;border: 5px solid #FFFF00;text-align:center;">This is a div html content field into a p field<br>and this is the second line</div>



0xF9B9AE1B70572D553A1CBB6FA21AADF48936F8FE298141C6C008F4D611879772
Script address generated: 0x0FCAE316DD9A47A1A305244E60FE61AB741A1BF3E0B83D2CDFEA6C01E0E65C89




newscript trackall:true script:"LET a=0xff RETURN TRUE"
0xEBB05AD34DD86E4F56B3F72BF63AAA82AB31AB9AA7647AF6C5CD644615C2A20E

////////////////////////
newscript trackall:true script:"LET finalUserWallet=0xF18C5C4A6EF4C15D580F2BF0C01ABC1E10A2DD0C10799E3836228054BB803317 LET dappDeveloperWallet=0xfffff RETURN TRUE"
"response":{
    "script":"LET finalUserWallet=0xF18C5C4A6EF4C15D580F2BF0C01ABC1E10A2DD0C10799E3836228054BB803317 LET dappDeveloperWallet=0xfffff RETURN TRUE",
    "address":"0x39248313359B8B32D1FCEFE76DA11B3FD0E1284DF26E8643B86B5C5042F43287",
    "miniaddress":"MxG081P4W1H6DCRHCPD3V7FSTMQ26PVQ3GWGJFWDQ347E3BBH845T1WGS57Y6FK",
    "simple":false,
    "default":false,
    "publickey":"0x00",
    "track":true
  }
  txncreate id:1
  txninput id:1 coinid:0x9511A05749277B8F0A427CBD1155080D6AE496DD4192BC3B65C352748274F3AE
  txnoutput id:1 amount:1 address:0xFD69A239AFF3EA1EF4ED2F15772913652F1244026449C6A3DA3C461AC6E6C6A1 tokenid:0x00 storestate:false
  txnbasics id:1
  txncheck id:1
///////////////////////////////

//////////////////////////////
newscript trackall:true script:"LET a=0xff RETURN TRUE"
"response":{
    "script":"LET a=0xff RETURN TRUE",
    "address":"0xEBB05AD34DD86E4F56B3F72BF63AAA82AB31AB9AA7647AF6C5CD644615C2A20E",
    "miniaddress":"MxG087BM1DD6JEZDP7YDCVN5FR3YAK2YCZQN6Y7CHTFDHEDCH31BGY21QH84930",
    "simple":false,
    "default":false,
    "publickey":"0x00",
    "track":true
  }

  txncreate id:1
  txninput id:1 coinid:0x24AC50B0288796DB78635934830AB1BA9DF4B0345687BAB5B77DBCCCFC888850
  txnoutput id:1 amount:2 address:0xFD69A239AFF3EA1EF4ED2F15772913652F1244026449C6A3DA3C461AC6E6C6A1 tokenid:0x00 storestate:false
  txnbasics id:1
  txncheck id:1
//////////////////////////////////////

/////////////////////
runscript script:"LET final+c=0xF18C5C4A6EF4C15D580F2BF0C01ABC1E10A2DD0C10799E3836228054BB803317 RETURN TRUE"
runscript script:"LET finalCapital=0xF18C5C4A6EF4C15D580F2BF0C01ABC1E10A2DD0C10799E3836228054BB803317 RETURN TRUE"
//////////////////
//delete malformed advertiser tokens
txncreate id:1;
txninput id:1 coinid:0x8EB98C109841B73D75440E2F5D73707B39C41BCE8C55F2678D4F386A0B40F2FA;
txnoutput id:1 address:0xfffff amount:10;
txnbasics id:1
txnsign id:1 publickey:auto;
txnpost id:1;
txndelete id:1;


txncreate id:1
txninput id:1 coinid:0x3275778D76857ECF1C06109ED9BB16EEB05975FD1CB7E2963690DEF60AC89A68
txninput id:1 coinid:0xD6F95356C4225DF33A1A1EFAF80D9D0E94444CA87A19DED858D88914608AC9FD
txnoutput id:1 amount:1 address:0x3A159E632BEAA543E3B9A3AA2AB967B3C39FBB5054060265EE1DCBEB5DE56A1A tokenid:0x7F194EF41E1F1B2A31161D4AAFAF61C0E7468BDC072F35649F98F4E9714CEBDD storestate:true
txnoutput id:1 amount:8.6 address:0xAD3CB5288AE328938A8A68BE3A03D0B5E9BF265A9B29C7747F74057E0CA8CF15 tokenid:0x00 storestate:false
txnoutput id:1 amount:8.6 address:0xF18C5C4A6EF4C15D580F2BF0C01ABC1E10A2DD0C10799E3836228054BB803317 tokenid:0x00 storestate:false
txnoutput id:1 amount:1.4 address:0x100AD4CDE5F86D739D417047A2EF6D83B10E9B58E646881593C4E728E48CB15B tokenid:0x00 storestate:false
txnbasics id:1
txncheck id:1





Minima @ 10/11/2022, 9:25:02 AM : PRINTING splitted command:
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txncreate id:723612532
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txninput id:723612532 coinid:0x55D06373E8315AA0BB5EBB1AEB1FDC24E7BDB012171EB2DF52F6BAC2C7D0C234
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txninput id:723612532 coinid:0xFBD0938A38ACC5E4317655524C0D6DD9C89EA8FBE963E59BFD37527A3A903F0F
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txninput id:723612532 coinid:0x479EF40FE529760C94F32E1D27277B3E521F15E49A07FED215B690BF5E50D6D5
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txninput id:723612532 coinid:0xDC90A9B7D84FB1ED87A720BC7F2AC304C3A5E64EB5A2F378DCE43A4ED2C4FDBC
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txninput id:723612532 coinid:0x05983DF9DFEB5B69A2C543A9F4F042D0B52522311F32008B6765371522F7BF73
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txninput id:723612532 coinid:0x5EF1089CA36B2219F177CF28C1CBB5B99C8C516E9D75DCF784EE1D8E5D85167D
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnoutput id:723612532 amount:40 address:0xBF0AFA4C554A15D82A61941FA36752B0675A88857F06B95D004EBFBBC25F59D1 tokenid:0x00 storestate:false
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnoutput id:723612532 amount:1 address:0xBF0AFA4C554A15D82A61941FA36752B0675A88857F06B95D004EBFBBC25F59D1 tokenid:0x690FE488BACC41E7C1EC2E54927A20B244172A65ECF006AAD6744237B020E512 storestate:true
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnoutput id:723612532 amount:950 address:0x2F7697C8403E7253F491C64F6FBCC73C5FF9A4722B2EECB2F51AACA8832A1446 tokenid:0x00 storestate:false
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:0 value:0x75E307C4A5D729B9BC895CC49679A631B67101162145EB0F3A2B11F4ED76AADB
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:1 value:0xA741BE8534106BBF62669462CE1EBA4518A455483FF8706B937DC530C8A0054C
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:2 value:0xCC6714FC3FA6289D7BB7C5824295D7F130104E92AD5F9AA759D963EE197DE54F
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:3 value:0x2EB9FE873B849B01F743EAD0D5A6AC965FFEF9569358B4DC6D4137F2F2920E2D
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:4 value:0x9ABB175DF38082F57A7381750578F0BD2BDAE63E1E7353BA3DE463AE793BBA57
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:5 value:0x20E3220B4C0B4E7941663E21216A1C6E6749C5A7C403CD41E7D33738C1DBCBCA
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:6 value:10
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:7 value:10
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:8 value:0
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:9 value:1
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:10 value:0x2F7697C8403E7253F491C64F6FBCC73C5FF9A4722B2EECB2F51AACA8832A1446
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:11 value:10
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:12 value:0x4F1381615E74F45419B8FAAE2F05A63ABC28284DB78FE7BFF34891B345B13F72
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:13 value:[TEST-2]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:14 value:2
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:15 value:20
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:16 value:0x00
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:17 value:20
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:18 value:0x00
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:19 value:2
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:20 value:[https://i.postimg.cc/yxwgR86y/Stargate-color.png]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:21 value:[-]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:22 value:[click]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:23 value:[-]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:24 value:[-]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:25 value:[-]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:26 value:[-]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:27 value:[-]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:28 value:[-]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:29 value:[-]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:30 value:[-]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnstate id:723612532 port:31 value:[-]
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnbasics id:723612532
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnsign id:723612532 publickey:auto
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txnpost id:723612532
mds.js:108 Minima @ 10/11/2022, 9:25:02 AM : txndelete id:723612532
