--------------------------------------------------------------
IF SIGNEDBY( PREVSTATE(0) THEN RETURN TRUE ENDIF
LET tokens_to_buy = PREVSTATE(2)
LET price_of_tokens = 1 * tokens_to_buy

ASSERT VERIFYOUT( @INPUT PREVSTATE (1) PREVSTATE(2) 0x00 )

/* Send the change back to the Script */
LET chg = @AMOUNT - tokens_to_buy
IF chg GT 0 THEN
    ASSERT VERIFYOUT ( INC(@INPUT) @ADDRESS ( @AMOUNT - amt ) @TOKENID TRUE )
ENDIF
RETURN TRUE
--------------------------------------------------------------

DAO MDAE:
The contract has two tokens (gDAE and aDAE) to be exchanged by 1 minima for every token a user wants to buy.
The owner (BOB) of the tokens is the PREVSTATE(0) it is a publickkey of an address of the DAO's node (the original,
that creates all tokens)

3: Let's say Bob is the owner "PREVSTATE(0)" of the contract and put his address on it "PREVSTATE(1)",
Bob deposit 10 Tokens on the contract(gDAE). Alice wants those 10 tokens deposited on Bob's contract,
so Alice has to send a quantity (PREVSTATE(2)) to the address "PREVSTATE(1)" of minimas to the Bob's contract
where Bob specified his address "PREVSTATE(1)" --> that is where minimas are going to go.
-So alice has to build a transaction to meet all the criteria and satisy contract rules in order to get
the 10 tokens deposited on the contract.
-The price of one token is 1 minima so the script must calculate the amount of minimas required.

--------------------------
----- setup startup nodes
Node 1: after genesis:
java -jar minima.jar -data edenbase1 -test -nop2p -mdsenable

Node 2:
java -jar minima.jar -data edenbase2 -test -nop2p -port 10001 -connect 127.0.0.1:9001
--------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
----------------------------------------
second aproach to buy tokens from DAO:
----------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
------> What about this other aproach, node 2 sent the total minimas the tokens cost to the DAO's original address,
let says 1 token cost 1 minima, so node 2 send 10 minimas and set on his state variables the tokenid what he wants and
 the wallet address  where it wants to and the number of tokens it wants to. So no contract involve so far, then ,
 node 1 receives a transaction and this is a balance event change, so it examines the state variables,
if they are what expected, then the node 1 send the tokens asked directly to the wallet of node 2,
no contract involved so far. what do you think of it ?

-----> node 1 create 100 tokens gDAE
->tokencreate name:gDAE amount:100 decimals:0
"tokenid":"0xC0C5D654002BE1E91872693CB40AD57D0836800ED74226EF357413E33CE00E64",

-----------------
-----> sending from node2 to node1(dao wallet) info and money to buy tokens gDAE
-----------------

-----> first send some minimas from node 1 to node 2
->getaddress on node 2
"address":"0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84",

----> second send 10 minimas of node 2 to node 1 configured with state vars to tell node 1(DAO) you want buy tokens
->getaddress on node 1(DAO_origin) HARDCODED ADDRESS ON THE DAO to simplify searches
"address":"0x55DA27A0E823BDE3B8A229E432780F931C1D1326E7B8CD356A839E6A6AAB370C"

address:DAO_origin HARDCODED ADDRESS ON THE DAO to simplify searches
amount:10
tokenid:minima
state_vars:
0:[buy_tokens],
1:wallet buyer,
2:token to buy,
3: amount to buy

->send address:0x55DA27A0E823BDE3B8A229E432780F931C1D1326E7B8CD356A839E6A6AAB370C amount:10 tokenid:0x00 state:{"0":"[buy_tokens]", "1":"0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84", "2":"0xC0C5D654002BE1E91872693CB40AD57D0836800ED74226EF357413E33CE00E64", "3":"10"}

----> third, !!!!!! very imporant !!!!!!
----> On event NEWBALANCE, we check if the received token is a minima coin.
----> If is a minima coin then in order to get the state variables and to know if is a buy_tokens order,
----> we need to execute "coind address:DAO_origin" ,and parse the results, check it and extract information of
----> state vars.
----> we only consider the easy case scenario, where only watch the first coin on the list as it will be the last one
----> received, on a real case scenario, this order should be check on the sql database if is already executed
----> if so, then noting to do, if not, then we have to send the tokens to the buyer and register this bought
----> to the sql database

->coins address:0x55DA27A0E823BDE3B8A229E432780F931C1D1326E7B8CD356A839E6A6AAB370C

<<<<<<< HEAD
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
----------------------------------------
Third aproach ## ---> Contract on the Token <--- ## or on a script addess DAO ?:
----------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

We have seen the problems if we take the aproach to send the tokens into an script and then when the user
(Advertiser) who install the DAO and register the script cannot see the tokens available on it, as they where
deposited before he registered the script on his node.

-> One posible solution to that it is deposit a token under demand to the script, once the (Advertiser) has
installed the DAO and registered the script, he send a fraction of 1 minima to the DAO address setting a state
variable on it indicating that he wants a number of tokens, once the Original DAO receives the minimas with state
variables, it transfer that amount of tokens into the script, once that is done, the advertiser can see that
a number of tokens have been deposited on the script and then he can buy them executing an exchange contract.
------> Problems:
        The script is the same for all Advertisers who register the script, so they node will track all tokens
        that are deposited on the script since they registered the script at least during the las 24 hours, so
        it can be a huge amount of tokens to track, so this aproach it dosen't seem the best solution.

-> ## The choosen solution: ##
To avoid the problem of visibililty of the tokens, instead to use an script to deposit the tokens, we used
a wallet address hardcoded on the DAO app that points to the originalDAO's node (there could also be several
of them, decentralizing the original DAO between several different nodes, so the original DAO could have
a list of hardcoded addresses where to buy tokens), that way, instead of the Advertiser to ask
for a token to be deposited on an script addres, directly ask for buy the token sending the minimas of the
tokens total of tokens to buy and several state variables set as described on ## SECOND APROACH ## and once the
minimas have been received on the Original DAO's address and all is checked, the tokens bought are sent to
the advertiser wallet.
------> Problems:
        The whole tokens of the same type must be generated at once so they can have the same tokenid and then act
        as a full syncronized ecosystem, so, the script that rules the tokens must be set on the tokens itself
        instead on an script address(to avoid the problems of visibility we have described previsouly).

        This makes the script to build more complex, but every token can act independently and here we must
        consider how the system is going to deal with the rewards to be received by all parties when a token
        is spent and the problems that may arise, so lets to consider the followings things to get an an
        overview of the complexity:

        1.- When the advertiser send the token to the target audience, the token is spent, but this has not
            to trigger the rewards system of the contract, one condition that needs to be check is that if the
            token is spent by the Advertiser who bought it, then no action needs to be done and the token
            must be spent(sent) freely.

        2.- Point of view of Dapp where the token is/are sent, this is a complex case too, lets divide it into
        two use cases:
          2.1- If is a final user, the token will be received on the user's node, so there has to be an API
          advertiser.js that the Dapp has to use to check for the advertiser tokens on the node and then show them
          into the Dapp as some kind of link or image on the app.
          - So when the user of the Dapp click on the link a transaction must be trigger after the image or
          text has ben viewed.
             -So possible option, use coinexport from to set the data on the token and on the Dapp to spend
             the token use coinimport and then build a transaction on a exchange contract on advertiser node.
             you receive a reward in exchange for the token ??? possible ? the reward maybe should be set on a
             special script to be spent whithout sign it (the coin reward).

             -So possible option, and we need to let all be triggered automatically,so we need the TrackingAPP
             where Dapps builders and users will register to it with their wallet to receive publicity tokens.
             So then an API must be available to the AdverstiserAPP and DAO app as an external source input,
             several of them, where it can be accessed by an external server or as an script solution like
             depositing tokens into an script of Advertiser when asked to TrackingAPP that will contain the
             addresses of wallets (users or Dapps) and selected by the types of topics about what kind of Publicity
             they want to receive, so, the original trackingDAPP will have an sql database, and the petition of
             information will be triggered for now, like the DAO solution, sending a fraction of minima with the
             info needed set on state variables and the dapp advertiser will receive a token or several with all wallet
             addresses setted on it, (when omnia is ready that can be done over omnia or Maxima).
             MAXIMA could be user here, if there are several tokens to sent to the Advertiser about the wallet
             addresses where the publicity tokens can be sent, then instead of sending a tokens with the info
             set on the token's state variables, could be sent over MAXIMA contact's advertiser, that previously
             his contact should have been sent as state variable on the fraction of minima sent to the trackerDAPP.

             -So the advertiser on a final user case, must register or get an script () address based on
              the wallet that the user used to register himself on the TrackingDAPP to be able to receive publicity,
              that way the script will be unique for every user as when the user registers on TrackinAPP
              this will create the script on user's node, so that, since that moment, the user will always
              be able to see the tokens of Publicity his node receives and the Advertiser only have
              to send the publicity token to that script and also the reward to receive, so it will be an
              exchange contract, where the publicity token will go back to
              the DAO and the rewards on the script will go to the user's wallet.

            -So the advertiser can be configured on his state variables the rewards amount and type to be required
             by the contract, that once it is sent to the final user script also must check that the rewards
             specified on his state variables are sent according the Advertiser will and in case the token is sent
             back to the DAO those conditions would not be required and once the token is on the final user script,
             the token could accept the input of a state variable with the wallet of the user where to receive the rewards,
             and the third party(developers of the Dapp) to receive his rewards also but it could be configured by ADVERTISER
             so then it couldn't be ncessary..... but then the final user script should only would be as a kind of container
             that only protect the rewards to be spent when the Token is spent .....but this last part,
             I am not sure if it can be done....

**Proof of Concept CONTRACT 1 (final user no intermediary):**

-node 1 (DAO):
  create 10 tokens
  the tokens must have an script that let the Advertiser to configure it, the script
  (the exchange contract for the final user)
  - Create the script into the tokens
    - conditions
      - vault address script ** state 0 **
      - publickey vaullt-1 ** state 1 **
      - publickey vaullt-2 ** state 2 **
      - publickey vaullt-3 ** state 3 **
      - Owner dao address ** state 4 **
      - Owner dao publickey ** state 5 **
      - Third party comission ** state 6 ** to be received by DAO when token is spent from the reward amount.
      - Final user comission ** state 7 ** to be received by DAO when token is spent from the reward amount.
      - If the rewards are not minimas, then a fix % must be set(according to the values of rewards-**Oracle**?)
        ** state 8 **
      - Price of Token ** state 9 **
      - The tokens cannot be moved(buy) if the ** state 10 ** is not set to advertiser wallet,if state 10
        is not a valid wallet it will fail.
--------

-node2 (Advertiser)
  -buy the tokens to node 1
  -Advertiser buyer wallet ** state 10 **
  -Advertiser buyer amount to buy ** state 11 **
  -Avertiser
  - Advertiser cannot move the token unless is configured ** state 12 ** [configured], only can be moved to the
    same address to let do a flashloan contract to configure the token/s
  - Once the token is configured it can be sent anywhere
  - Once the token leave the Advertiser node it cannot be configured anymore a state variable
  ** state 11 ** [sent] must be added.
  -configure one token for one final user (script - exchange contract)
  -configure address of intermediary party(if there is one) ** state 8 **
  -configure address of final user ** state 9 **
  -configure the script address based on the final user address where the tokens will be sent. ** state 10 **
  -configure the amount of reward intermediary user(if there is one) ** state 11 **,
  -and type (if there is intermediary) ** state 12 **
  -configure the amount of rewards final user ** state 13 **,
  -configure type  ** state 14 **
  -send the token and the rewards to the final user script (first, node 3 must have create the script,which is
  done when the user register his address to the TrackingDapp)
  -**state vars from 14-29 keep reserved** in case are need for further configurations
  -Avertising configuration:
    -type of publicity ** state 30 **
      -(0:text ** reserved 31-49 state vars **)
      -(1:web page)
      -(2:url image)
      -(3:url survey / text (using reserved text state variables)
      -(4:actions (Follow twitter/social networks acount, RT, Likes, p)-using reserved text state variables)
      -(5:conquest using reserver text state vars to set a url or instructions)
    -**configure the rules/requirements to drive how publicity is managed:**
      -This part can be very complex and done in multiples ways, and it depends on the type of Publicity
      to be show or managed, so it may require external actor (Oracles, bots, list of instructions....),
      so it can be a url that indicates or do all necessary actions to check the all steps are followed,so
      we can divide into two sections:
        **1.- section 1 to manage how publicity is shown on the target devices/actors**
        **2.- section 2 to manage how to detect the publicity is viewed or the steps have been followed**
      We can use all other state variables to manage the former two sections.
------------------------------

-node 3 (Final user)
  -register himself the script for receiving publicity(simulating it does using trackingDapp)
  -this container script to protect the rewards, must check that an output of one token publicity exists
  so that way, the rewards could not be extracted if the conditions of publicity token script are not meet.
  -simulate it reads the Publicity
  -claims the rewards exchanging the token publicity for the rewards building a transaction to
  meet the requirements of echange contract on publicity's Token and pays also the comissions to DAO.


Final user script:
ASSERT VERIFYOUT( @INPUT daoAddres 1 tokenPublicity TRUE )
ASSERT VERIFYOUT( INC(@INPUT) addressUser @AMOUNT 0x00 TRUE )
RETURN true



---------------------------------------------
----------------- SCRIPT --------------------
---------------------------------------------
/*  Dao owners let transfer the tokens from the vault to DAO (PREVSTAE 4) where buyers will buy the tokens
    There is no need to preserve the states (4-5) if there is not a buy
*/

ASSERT SAMESTATE ( 0 0 )
ASSERT SAMESTATE ( 1 1 )
ASSERT SAMESTATE ( 2 2 )
ASSERT SAMESTATE ( 3 3 )

IF MULTISIG ( 2 PREVSTATE( 1 ) PREVSTATE( 2 ) PREVSTATE( 3 ) ) THEN

    /* The owners can modify comissions of third parties and final users */

    ASSERT STATE ( 6 ) GT 0
    ASSERT STATE ( 7 ) GT 0
    ASSERT STATE ( 8 ) GT 0
    ASSERT STATE ( 9 ) GT 0

    /* Transfer the tokens from the vault to the DAO owner */
    RETURN VERIFYOUT (@INPUT STATE( 4 ) @AMOUNT @TOKENID TRUE)

ENDIF

/* Only the owners can modify comissions price and owner and publickey of DAO -  so lets avoid it for the others*/
ASSERT SAMESTATE ( 4 4 )
ASSERT SAMESTATE ( 5 5 )
ASSERT SAMESTATE ( 6 6 )
ASSERT SAMESTATE ( 7 7 )
ASSERT SAMESTATE ( 8 8 )
ASSERT SAMESTATE ( 9 9 )

/* BUY Dao owner state 5 let transfer the tokens to buyers in exchange for the minima price * AMOUNT */
IF SIGNEDBY( PREVSTATE( 5 ) ) THEN

  LET vault = STATE ( 0 )
  LET dao = STATE ( 4 )
  LET price = PREVSTATE( 9 )
  LET buyer = STATE ( 10 )
  LET amount = STATE ( 11 )
  LET chgBack = @AMOUNT - amount*price
  LET chgBackTokens = GETINAMT( 2 ) - amount
  /* Check the payed minimas in exchange for tokens are sent to the vault*/
  ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE)

  /* Check the total tokens bought are sent to the buyer second input */
  ASSERT VERIFYOUT( INC( @INPUT ) buyer amount/price @TOKENID TRUE )

  /* Check the changeBack  if there is one is sent to the buyer */
  IF chgBack GT 0 THEN
    ASSERT VERIFYOUT(@INPUT vault chgBack 0x00 TRUE)
  ENDIF

  /* Check the changeBackTokens  if there is one is sent to the DAO's address */
  IF chgBackTokens GT 0 THEN
    ASSERT VERIFYOUT( INC(@INPUT) dao chgBackTokens @TOKENID TRUE)
  ENDIF

  RETURN TRUE

ENDIF
-------------------------------------------------------------------------
------------------ END SCRIPT, needs to be clean to be ready to use -----
-------------------------------------------------------------------------

-----------------------------------
---- test script parametres on scriptide:
state:{"0":"0xf00","1":"0xf10","2":"0xf20","3":"0xf30","4":"0xe40","5":"0xe41","6":"2","7":"2","8":"2","9":"1","10":"0xc01","11":"5"}
prevstate:{"0":"0xf00","1":"0xf10","2":"0xf20","3":"0xf30","4":"0xe40","5":"0xe41","6":"2","7":"2","8":"2","9":"1"}
signatures:["0x5F549765118028EA41E57710FB500E23FE859AFEEE940C6F7DA9F5B17C3AE4D3"]
@AMOUNT 10
@COIND 0x001
@INPUT 0x001
@TOKENID ["0x00","0xC0C5D654002BE1E91872693CB40AD57D0836800ED74226EF357413E33CE00E64"]

clean script: "ASSERT SAMESTATE(0 0) ASSERT SAMESTATE(1 1) ASSERT SAMESTATE(2 2) ASSERT SAMESTATE(3 3) IF MULTISIG(2 PREVSTATE(1)PREVSTATE(2)PREVSTATE(3)) THEN ASSERT STATE(6) GT 0 ASSERT STATE(7) GT 0 ASSERT STATE(8) GT 0 ASSERT STATE(9) GT 0 RETURN VERIFYOUT(@INPUT STATE(4)@AMOUNT @TOKENID TRUE) ENDIF ASSERT SAMESTATE(4 4) ASSERT SAMESTATE(5 5) ASSERT SAMESTATE(6 6) ASSERT SAMESTATE(7 7) ASSERT SAMESTATE(8 8) ASSERT SAMESTATE(9 9) IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) LET chgback=@AMOUNT-amount*price LET chgbacktokens=GETINAMT(2)-amount ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT)buyer amount/price @TOKENID TRUE) IF chgback GT 0 THEN ASSERT VERIFYOUT(@INPUT vault chgback 0x00 TRUE) ENDIF IF chgbacktokens GT 0 THEN ASSERT VERIFYOUT(INC(@INPUT)dao chgbacktokens @TOKENID TRUE) ENDIF RETURN TRUE ENDIF"

script address: 0x7AEC817686B8EE2F75343F7D3266F2A965798D2120B8E05D2C8E54D5461C4E44

-----------------------------------

#################################################
################ STEPS to SET TOKENS AND SCRIPTS to work
#################################################
1.- Create the multisingature contract first, as we need the address for script 2, we are going to use
the script ide to accelerate the process, once the script is run, we get a clean script and one script address.
We need to run that clean script on the console with the command "newscript" , to register the script and get the same script address.

--------------------------------
Script multi signature VAULT:
"RETURN MULTISIG ( 2 0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0 0xB5A82ADB68BB5204DC9CDB1B9C6218CF6E88B9C7B0BAA02B713D7E7E771E3625 0xCEA682FA3CF06907786993B7D8B8B73682EBA9AB20D255A78D2EC9A84ECDFA92 )"

clean script:
"RETURN MULTISIG(2 0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0 0xB5A82ADB68BB5204DC9CDB1B9C6218CF6E88B9C7B0BAA02B713D7E7E771E3625 0xCEA682FA3CF06907786993B7D8B8B73682EBA9AB20D255A78D2EC9A84ECDFA92)"

VAULT address script-0: 0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8

-> newscript track:true script:"RETURN MULTISIG(2 0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0 0xB5A82ADB68BB5204DC9CDB1B9C6218CF6E88B9C7B0BAA02B713D7E7E771E3625 0xCEA682FA3CF06907786993B7D8B8B73682EBA9AB20D255A78D2EC9A84ECDFA92)"
--------------------------------

2.- Create the the tokens of publicity, but those tokens have to incroporate the General script that will
  run the behavior and the conditions of the tokens when they are going to be spent or configured.
  So first we need a clean script, and we use the scriptide to get that clean script, once run on the ide,
  we will get a clean script, then we will need to create the publicity tokens and attach this script with
  its state variables.

clean script: "ASSERT SAMESTATE(0 0) ASSERT SAMESTATE(1 1) ASSERT SAMESTATE(2 2) ASSERT SAMESTATE(3 3) IF MULTISIG(2 PREVSTATE(1)PREVSTATE(2)PREVSTATE(3)) THEN ASSERT STATE(6) GT 0 ASSERT STATE(7) GT 0 ASSERT STATE(8) GT 0 ASSERT STATE(9) GT 0 RETURN VERIFYOUT(@INPUT STATE(4)@AMOUNT @TOKENID TRUE) ENDIF ASSERT SAMESTATE(4 4) ASSERT SAMESTATE(5 5) ASSERT SAMESTATE(6 6) ASSERT SAMESTATE(7 7) ASSERT SAMESTATE(8 8) ASSERT SAMESTATE(9 9) IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) LET chgback=@AMOUNT-amount*price LET chgbacktokens=GETINAMT(2)-amount ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT)buyer amount/price @TOKENID TRUE) IF chgback GT 0 THEN ASSERT VERIFYOUT(@INPUT vault chgback 0x00 TRUE) ENDIF IF chgbacktokens GT 0 THEN ASSERT VERIFYOUT(INC(@INPUT)dao chgbacktokens @TOKENID TRUE) ENDIF RETURN TRUE ENDIF"

script address: 0x7AEC817686B8EE2F75343F7D3266F2A965798D2120B8E05D2C8E54D5461C4E44
owner DAO address-4: 0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D
owner DAO publickey-5: 0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750

-> tokencreate name:"AAA" amount:2000 decimals:0 state:{"0":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8","1":"0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0","2":"0xB5A82ADB68BB5204DC9CDB1B9C6218CF6E88B9C7B0BAA02B713D7E7E771E3625","3":"0xCEA682FA3CF06907786993B7D8B8B73682EBA9AB20D255A78D2EC9A84ECDFA92","4":"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D","5":"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750","6":"2","7":"2","8":"2","9":"1"} script:"ASSERT SAMESTATE(0 0) ASSERT SAMESTATE(1 1) ASSERT SAMESTATE(2 2) ASSERT SAMESTATE(3 3) IF MULTISIG(2 PREVSTATE(1)PREVSTATE(2)PREVSTATE(3)) THEN ASSERT STATE(6) GT 0 ASSERT STATE(7) GT 0 ASSERT STATE(8) GT 0 ASSERT STATE(9) GT 0 RETURN VERIFYOUT(@INPUT STATE(4)@AMOUNT @TOKENID TRUE) ENDIF ASSERT SAMESTATE(4 4) ASSERT SAMESTATE(5 5) ASSERT SAMESTATE(6 6) ASSERT SAMESTATE(7 7) ASSERT SAMESTATE(8 8) ASSERT SAMESTATE(9 9) IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) LET chgback=@AMOUNT-amount*price LET chgbacktokens=GETINAMT(2)-amount ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT)buyer amount/price @TOKENID TRUE) IF chgback GT 0 THEN ASSERT VERIFYOUT(@INPUT vault chgback 0x00 TRUE) ENDIF IF chgbacktokens GT 0 THEN ASSERT VERIFYOUT(INC(@INPUT)dao chgbacktokens @TOKENID TRUE) ENDIF RETURN TRUE ENDIF"
---------------------------------------

3. Send from node 2 to DAO(node 1) order to buy tokens, sending the minimas and the amount of a token to buy

address:DAO_origin: 0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D
amount:10
tokenid:minima
state_vars:
0:[buy_tokens],
1:wallet buyer: 0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84
2:token to buy id: 0xB39BA80EBAB948DD4BB0C56A9AA27C886D723798E87B897845F77328EBAC4E33
3: amount to buy: 10

->send address:0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D amount:10 tokenid:0x00 state:{"0":"[buy_tokens]", "1":"0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84", "2":"0xF182A3DBA5131DF6071C02C31D3813F7F56179F38ECEF472F55940AB60D81432", "3":"10"}

4.- Create a manual transaction to buy a token, the scenario is: the tokens are created with the previous script,
  the tokens are on the DAO not the VAULT, the transaction is done simulating the DAO receives an order of
  buy tokens and on the NEWBALANCE event this transaction should be built and fired.
  Notice that the script conditions must be meet, so every state variable that script conditions required
  must be set when building the transaction.The state variables some of them are related directly to your
  node DAO original(in a real case scenario, there would only be one node DAO-or several on a more decentralized version)
  NOTE:
    - state var 10 is the other node address (the buyer wallet) where the tokens bought will be sent
    - state var 11 is the amount of tokens to buy by the buyer.
    - coinid 1 is the minimas sent by the buyer to the DAO to buy the tokens with state vars info set.
      must be signedby the public address where the coins are before sendig them to vault.
    - coinid 2 is the tokens the buyer wants to buy
      so the node 2 will sent the minimas to buy the tokens to the node 1 (DAO) and the transaction
      will use the coinid of the minimas sent by the buyer, and the coinid of the token to buy

->txncreate id:buy2
->txnstate id:buy2 port:0 value:"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8"
->txnstate id:buy2 port:1 value:"0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0"
->txnstate id:buy2 port:2 value:"0xB5A82ADB68BB5204DC9CDB1B9C6218CF6E88B9C7B0BAA02B713D7E7E771E3625"
->txnstate id:buy2 port:3 value:"0xCEA682FA3CF06907786993B7D8B8B73682EBA9AB20D255A78D2EC9A84ECDFA92"
->txnstate id:buy2 port:4 value:"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D"
->txnstate id:buy2 port:5 value:"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750"
->txnstate id:buy2 port:6 value:"2"
->txnstate id:buy2 port:7 value:"2"
->txnstate id:buy2 port:8 value:"2"
->txnstate id:buy2 port:9 value:"1"
->txnstate id:buy2 port:10 value:"0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84"
->txnstate id:buy2 port:11 value:"10"
->txninput id:buy2 coinid:0x4E5748773F27AFE5CB5E853BB02AC40C41B8F1CD68A67E59D2C78D71BC4ADA50
->txninput id:buy2 coinid:0x323029868A6715A51DD500951E015D696F7D7AE6CB480801D21209FE2725CAB5
->txnoutput id:buy2 amount:10 address:0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8 tokenid:0x00 storestate:false
->txnoutput id:buy2 amount:10 address:0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84 tokenid:0xB39BA80EBAB948DD4BB0C56A9AA27C886D723798E87B897845F77328EBAC4E33 storestate:true
->txnbasics id:buy2
->txnsign id:buy2 publickey:0x485757B8AB7A78B95A663E36ED508865F6B30FB3042ABF06E56B5F66839EB702
->txnsign id:buy2 publickey:0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750
->txnpost id:buy2



`
txncheck id:buy2
Minima @ 30/08/2022 16:57:00 [143.6 MB] : Token Script FAIL input:1 ASSERT SAMESTATE(0 0) ASSERT SAMESTATE(1 1) ASSERT SAMESTATE(2 2) ASSERT SAMESTATE(3 3) IF MULTISIG(2 PREVSTATE(1)PREVSTATE(2)PREVSTATE(3)) THEN ASSERT STATE(6) GT 0 ASSERT STATE(7) GT 0 ASSERT STATE(8) GT 0 ASSERT STATE(9) GT 0 RETURN VERIFYOUT(@INPUT STATE(4)@AMOUNT @TOKENID TRUE) ENDIF ASSERT SAMESTATE(4 4) ASSERT SAMESTATE(5 5) ASSERT SAMESTATE(6 6) ASSERT SAMESTATE(7 7) ASSERT SAMESTATE(8 8) ASSERT SAMESTATE(9 9) IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) LET chgback=@AMOUNT-amount*price LET chgbacktokens=GETINAMT(2)-amount ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT)buyer amount/price @TOKENID TRUE) IF chgback GT 0 THEN ASSERT VERIFYOUT(@INPUT vault chgback 0x00 TRUE) ENDIF IF chgbacktokens GT 0 THEN ASSERT VERIFYOUT(INC(@INPUT)dao chgbacktokens @TOKENID TRUE) ENDIF RETURN TRUE ENDIF
{
  "command":"txncheck",
  "params":{
    "id":"buy2"
  },
  "status":true,
  "pending":false,
  "response":{
    "coins":[{
      "tokenid":"0x00",
      "input":"10",
      "output":"10",
      "difference":"0"
    },
    {
      "tokenid":"0xB39BA80EBAB948DD4BB0C56A9AA27C886D723798E87B897845F77328EBAC4E33",
      "input":"0.00000000000000000000000000000000000000002",
      "output":"0.0000000000000000000000000000000000000000001",
      "difference":"0.0000000000000000000000000000000000000000199"
    }],
    "tokens":2,
    "inputs":2,
    "outputs":2,
    "burn":"0.0000000000000000000000000000000000000000199",
    "validamounts":true,
    "signatures":2,
    "valid":{
      "basic":true,
      "signatures":true,
      "mmrproofs":true,
      "scripts":false
    }
  }
}

`

----new test with coind 10 minimas without state variables 0x19CEC6EFC04E5B9B6ADA45BE40CC34DC9937E19D251CF055C75C0B87FDD765D1

->txncreate id:buy2
->txnstate id:buy2 port:0 value:"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8"
->txnstate id:buy2 port:1 value:"0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0"
->txnstate id:buy2 port:2 value:"0xB5A82ADB68BB5204DC9CDB1B9C6218CF6E88B9C7B0BAA02B713D7E7E771E3625"
->txnstate id:buy2 port:3 value:"0xCEA682FA3CF06907786993B7D8B8B73682EBA9AB20D255A78D2EC9A84ECDFA92"
->txnstate id:buy2 port:4 value:"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D"
->txnstate id:buy2 port:5 value:"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750"
->txnstate id:buy2 port:6 value:"2"
->txnstate id:buy2 port:7 value:"2"
->txnstate id:buy2 port:8 value:"2"
->txnstate id:buy2 port:9 value:"1"
->txnstate id:buy2 port:10 value:"0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84"
->txnstate id:buy2 port:11 value:"10"
->txninput id:buy2 coinid:0x19CEC6EFC04E5B9B6ADA45BE40CC34DC9937E19D251CF055C75C0B87FDD765D1
->txninput id:buy2 coinid:0x323029868A6715A51DD500951E015D696F7D7AE6CB480801D21209FE2725CAB5
->txnoutput id:buy2 amount:10 address:0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8 tokenid:0x00 storestate:false
->txnoutput id:buy2 amount:10 address:0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84 tokenid:0xB39BA80EBAB948DD4BB0C56A9AA27C886D723798E87B897845F77328EBAC4E33 storestate:true
->txnbasics id:buy2
->txnsign id:buy2 publickey:0x485757B8AB7A78B95A663E36ED508865F6B30FB3042ABF06E56B5F66839EB702
->txnsign id:buy2 publickey:0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750
->txnpost id:buy2


` txncheck id:buy2
Minima @ 30/08/2022 17:07:49 [347.5 MB] : Token Script FAIL input:1 ASSERT SAMESTATE(0 0) ASSERT SAMESTATE(1 1) ASSERT SAMESTATE(2 2) ASSERT SAMESTATE(3 3) IF MULTISIG(2 PREVSTATE(1)PREVSTATE(2)PREVSTATE(3)) THEN ASSERT STATE(6) GT 0 ASSERT STATE(7) GT 0 ASSERT STATE(8) GT 0 ASSERT STATE(9) GT 0 RETURN VERIFYOUT(@INPUT STATE(4)@AMOUNT @TOKENID TRUE) ENDIF ASSERT SAMESTATE(4 4) ASSERT SAMESTATE(5 5) ASSERT SAMESTATE(6 6) ASSERT SAMESTATE(7 7) ASSERT SAMESTATE(8 8) ASSERT SAMESTATE(9 9) IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) LET chgback=@AMOUNT-amount*price LET chgbacktokens=GETINAMT(2)-amount ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT)buyer amount/price @TOKENID TRUE) IF chgback GT 0 THEN ASSERT VERIFYOUT(@INPUT vault chgback 0x00 TRUE) ENDIF IF chgbacktokens GT 0 THEN ASSERT VERIFYOUT(INC(@INPUT)dao chgbacktokens @TOKENID TRUE) ENDIF RETURN TRUE ENDIF
{
  "command":"txncheck",
  "params":{
    "id":"buy2"
  },
  "status":true,
  "pending":false,
  "response":{
    "coins":[{
      "tokenid":"0x00",
      "input":"10",
      "output":"10",
      "difference":"0"
    },
    {
      "tokenid":"0xB39BA80EBAB948DD4BB0C56A9AA27C886D723798E87B897845F77328EBAC4E33",
      "input":"0.00000000000000000000000000000000000000002",
      "output":"0",
      "difference":"0.00000000000000000000000000000000000000002"
    }],
    "tokens":2,
    "inputs":2,
    "outputs":1,
    "burn":"0.00000000000000000000000000000000000000002",
    "validamounts":true,
    "signatures":2,
    "valid":{
      "basic":true,
      "signatures":true,
      "mmrproofs":true,
      "scripts":false
    }
  }
}
 `

-------- new test simplifying the script buy3 !!!

IF SIGNEDBY( PREVSTATE( 5 ) ) THEN

  LET vault = STATE ( 0 )
  LET dao = STATE ( 4 )
  LET price = PREVSTATE( 9 )
  LET buyer = STATE ( 10 )
  LET amount = STATE ( 11 )
  LET chgBack = @AMOUNT - amount*price
  LET chgBackTokens = GETINAMT( 1 ) - amount
  /* Check the payed minimas in exchange for tokens are sent to the vault*/
  ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE)

  /* Check the total tokens bought are sent to the buyer second input */
  ASSERT VERIFYOUT( 1 buyer amount/price @TOKENID TRUE )

  /* Check the changeBack  if there is one is sent to the buyer */
  IF chgBack GT 0 THEN
    ASSERT VERIFYOUT(@INPUT vault chgBack 0x00 TRUE)
  ENDIF

  /* Check the changeBackTokens  if there is one is sent to the DAO's address */
  IF chgBackTokens GT 0 THEN
    ASSERT VERIFYOUT( 1 dao chgBackTokens @TOKENID TRUE)
  ENDIF

  RETURN TRUE

ENDIF

clean scriptp: "IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) LET chgback=@AMOUNT-amount*price LET chgbacktokens=GETINAMT(1)-amount ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(1 buyer amount/price @TOKENID TRUE) IF chgback GT 0 THEN ASSERT VERIFYOUT(@INPUT vault chgback 0x00 TRUE) ENDIF IF chgbacktokens GT 0 THEN ASSERT VERIFYOUT(1 dao chgbacktokens @TOKENID TRUE) ENDIF RETURN TRUE ENDIF"
script address: 0xB23C53CFCD7B85CE532C2D8795EB51B9A6AAD03920376DF08EA49B51B59B206C

-> tokencreate name:"CCC" amount:4000 decimals:0 state:{"0":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8","4":"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D","5":"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750","9":"1"} script:"IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) LET chgback=@AMOUNT-amount*price LET chgbacktokens=GETINAMT(1)-amount ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(1 buyer amount/price @TOKENID TRUE) IF chgback GT 0 THEN ASSERT VERIFYOUT(@INPUT vault chgback 0x00 TRUE) ENDIF IF chgbacktokens GT 0 THEN ASSERT VERIFYOUT(1 dao chgbacktokens @TOKENID TRUE) ENDIF RETURN TRUE ENDIF"

------address where tokens are : 0x9547119C429F3545369A211E221DD7A1C1CA570B1C75A106B869DAE3811F74BF
------publickey : 0x5F549765118028EA41E57710FB500E23FE859AFEEE940C6F7DA9F5B17C3AE4D3
------tokenid: 0xC5E4A282DED1CCF4643E54588AD19CD9A9A73C5B42971FCA1AE3E1162A4AFA9D
------coinid: tokens: 0xAB5218D8B6B26053ABB7A7CE35218EE032A62C91730AE5641B2ECBA92F1371AF

------coinid: 10 minimas: 0x1A8CF675284ED9BE2FCC30FD7BCAA2FE06D34A49F3640E0B318748D82AABDF37
------address 10 minimas: 0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D
------publickey: 0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750

->txncreate id:buy3
->txnstate id:buy3 port:0 value:"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8"
->txnstate id:buy3 port:4 value:"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D"
->txnstate id:buy3 port:5 value:"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750"
->txnstate id:buy3 port:9 value:"1"
->txnstate id:buy3 port:10 value:"0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84"
->txnstate id:buy3 port:11 value:"10"
->txninput id:buy3 coinid:0x1A8CF675284ED9BE2FCC30FD7BCAA2FE06D34A49F3640E0B318748D82AABDF37
->txninput id:buy3 coinid:0xAB5218D8B6B26053ABB7A7CE35218EE032A62C91730AE5641B2ECBA92F1371AF
->txnoutput id:buy3 amount:10 address:0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8 tokenid:0x00 storestate:false
->txnoutput id:buy3 amount:10 address:0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84 tokenid:0xC5E4A282DED1CCF4643E54588AD19CD9A9A73C5B42971FCA1AE3E1162A4AFA9D storestate:true
->txnbasics id:buy3
->txnsign id:buy3 publickey:0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750
->txnsign id:buy3 publickey:0x5F549765118028EA41E57710FB500E23FE859AFEEE940C6F7DA9F5B17C3AE4D3
->txnpost id:buy3


` txncheck id:buy3
Minima @ 31/08/2022 21:55:21 [84.3 MB] : Token Script FAIL input:1 IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) LET chgback=@AMOUNT-amount*price LET chgbacktokens=GETINAMT(1)-amount ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(1 buyer amount/price @TOKENID TRUE) IF chgback GT 0 THEN ASSERT VERIFYOUT(@INPUT vault chgback 0x00 TRUE) ENDIF IF chgbacktokens GT 0 THEN ASSERT VERIFYOUT(1 dao chgbacktokens @TOKENID TRUE) ENDIF RETURN TRUE ENDIF
{
  "command":"txncheck",
  "params":{
    "id":"buy3"
  },
  "status":true,
  "pending":false,
  "response":{
    "coins":[{
      "tokenid":"0x00",
      "input":"10",
      "output":"10",
      "difference":"0"
    },
    {
      "tokenid":"0xC5E4A282DED1CCF4643E54588AD19CD9A9A73C5B42971FCA1AE3E1162A4AFA9D",
      "input":"0.00000000000000000000000000000000000000004",
      "output":"0.0000000000000000000000000000000000000000001",
      "difference":"0.0000000000000000000000000000000000000000399"
    }],
    "tokens":2,
    "inputs":2,
    "outputs":2,
    "burn":"0.0000000000000000000000000000000000000000399",
    "validamounts":true,
    "signatures":2,
    "valid":{
      "basic":true,
      "signatures":true,
      "mmrproofs":true,
      "scripts":false
    }
  }
}


 `
VAULT script ` {
    "script":"RETURN MULTISIG(2 0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0 0xB5A82ADB68BB5204DC9CDB1B9C6218CF6E88B9C7B0BAA02B713D7E7E771E3625 0xCEA682FA3CF06907786993B7D8B8B73682EBA9AB20D255A78D2EC9A84ECDFA92)",
    "address":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8",
    "miniaddress":"MxG082H9WTY28ZRM5ENFT0M2PCERFV4GYCQDZDP7WY5YESVR41KAZV2R1M96Y1H",
    "simple":false,
    "default":false,
    "publickey":"0x00",
    "track":true
  }]
}
 `


 -------- new test simplifying the script buy4 !!! **txncheck: Token Script FAIL input:1 **
 `
 IF SIGNEDBY( PREVSTATE( 5 ) ) THEN

   LET vault = STATE ( 0 )
   LET dao = STATE ( 4 )
   LET price = PREVSTATE( 9 )
   LET buyer = STATE ( 10 )
   LET amount = STATE ( 11 )


   ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE)


   ASSERT VERIFYOUT( INC( @INPUT ) buyer amount/price @TOKENID TRUE )


   RETURN TRUE

 ENDIF
`

 clean scriptp: "IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT)buyer amount/price @TOKENID TRUE) RETURN TRUE ENDIF"
 script address: 0x67C8BB7073DF0106E8D76C9FBD428A6DF3CF8A80CBB8ECEBB4EE6380720F2564

`
-> tokencreate name:"DDD" amount:5000 decimals:0 state:{"0":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8","4":"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D","5":"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750","9":"1"} script:"IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT)buyer amount/price @TOKENID TRUE) RETURN TRUE ENDIF"
`
 ------address where tokens are : 0x1A0298B33C0A96542655516A0B782588CF5FE7111346286C20AB319FC8FC8007
 ------publickey : 0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0
 ------tokenid: 0x9B141972E02BC5859474D8D6FBF8FCE9B64871AA784AD4A364A970CE766E7831
 ------coinid: tokens: 0xC30A8DAC1F278538780ADEA08F686636B1CF58EA5A8DA3ADBFC42B1A2EA2C55D

 ------coinid: 10 minimas: 0xE37CA69BDA5BF857A25F5E492B7EEF89FFFAD0AA2C2ECF832F4F99FD2DD52B65
 ------address 10 minimas: 0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D
 ------publickey: 0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750

`
 ->txncreate id:buy4
 ->txnstate id:buy4 port:0 value:"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8"
 ->txnstate id:buy4 port:4 value:"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D"
 ->txnstate id:buy4 port:5 value:"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750"
 ->txnstate id:buy4 port:9 value:"1"
 ->txnstate id:buy4 port:10 value:"0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84"
 ->txnstate id:buy4 port:11 value:"10"
 ->txninput id:buy4 coinid:0xE37CA69BDA5BF857A25F5E492B7EEF89FFFAD0AA2C2ECF832F4F99FD2DD52B65
 ->txninput id:buy4 coinid:0xC30A8DAC1F278538780ADEA08F686636B1CF58EA5A8DA3ADBFC42B1A2EA2C55D
 ->txnoutput id:buy4 amount:10 address:0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8 tokenid:0x00 storestate:false
 ->txnoutput id:buy4 amount:10 address:0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84 tokenid:0x9B141972E02BC5859474D8D6FBF8FCE9B64871AA784AD4A364A970CE766E7831 storestate:true
 ->txnbasics id:buy4
 ->txnsign id:buy4 publickey:0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750
 ->txnsign id:buy4 publickey:0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0
 ->txnpost id:buy4
`

------>txncheck ERROR
 `
 txncheck id:buy4
 Minima @ 31/08/2022 22:48:18 [163.4 MB] : Token Script FAIL input:1 IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT)buyer amount/price @TOKENID TRUE) RETURN TRUE ENDIF
 {
   "command":"txncheck",
   "params":{
     "id":"buy4"
   },
   "status":true,
   "pending":false,
   "response":{
     "coins":[{
       "tokenid":"0x00",
       "input":"10",
       "output":"10",
       "difference":"0"
     },
     {
       "tokenid":"0x9B141972E02BC5859474D8D6FBF8FCE9B64871AA784AD4A364A970CE766E7831",
       "input":"0.00000000000000000000000000000000000000005",
       "output":"0.0000000000000000000000000000000000000000001",
       "difference":"0.0000000000000000000000000000000000000000499"
     }],
     "tokens":2,
     "inputs":2,
     "outputs":2,
     "burn":"0.0000000000000000000000000000000000000000499",
     "validamounts":true,
     "signatures":2,
     "valid":{
       "basic":true,
       "signatures":true,
       "mmrproofs":true,
       "scripts":false
     }
   }
 }
`

--------> VAULT ADDRESS script
`
 VAULT script  {
     "script":"RETURN MULTISIG(2 0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0 0xB5A82ADB68BB5204DC9CDB1B9C6218CF6E88B9C7B0BAA02B713D7E7E771E3625 0xCEA682FA3CF06907786993B7D8B8B73682EBA9AB20D255A78D2EC9A84ECDFA92)",
     "address":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8",
     "miniaddress":"MxG082H9WTY28ZRM5ENFT0M2PCERFV4GYCQDZDP7WY5YESVR41KAZV2R1M96Y1H",
     "simple":false,
     "default":false,
     "publickey":"0x00",
     "track":true
   }]
 }
`


------------------------------------------------------------------------------------------------
-------- new test simplifying the script buy5 with spaces !!! **txncheck: Token Script FAIL input:1 **
------------------------------------------------------------------------------------------------
`
IF SIGNEDBY( PREVSTATE( 5 ) ) THEN

  LET vault = STATE ( 0 )
  LET dao = STATE ( 4 )
  LET price = PREVSTATE( 9 )
  LET buyer = STATE ( 10 )
  LET amount = STATE ( 11 )


  ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE)


  ASSERT VERIFYOUT( INC( @INPUT ) buyer amount/price @TOKENID TRUE )


  RETURN TRUE

ENDIF
`

clean scriptp: "IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT) buyer amount/price @TOKENID TRUE) RETURN TRUE ENDIF"
script address: "0x75DE77B48D226D2764A3A3955EBEB5768760A5E589163619D804E019472AC930"


`
-> tokencreate name:"EEE" amount:6000 decimals:0 state:{"0":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8","4":"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D","5":"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750","9":"1"} script:"IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT) buyer amount/price @TOKENID TRUE) RETURN TRUE ENDIF"
`
------address where tokens are : 0x1A0298B33C0A96542655516A0B782588CF5FE7111346286C20AB319FC8FC8007
------publickey : 0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0
------tokenid: 0x6EDC0FD2B761B85922386A57FB2B5C0FFE69EEF1CA2B7C210BB59D29D78DAF34
------coinid: tokens: 0xCD6DAC5B13E11C8D39C70F8DBE75EFAA6D90893B564FAE14DF0F6F6C1FF8CEA9

------coinid: 10 minimas: 0x20CA3F125EAC53242FCF7B0B91C8F6C5C9E6E8B746F14978AE227FEE94D81921
------address 10 minimas: 0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D
------publickey: 0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750

`
->txncreate id:buy5
->txnstate id:buy5 port:0 value:"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8"
->txnstate id:buy5 port:4 value:"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D"
->txnstate id:buy5 port:5 value:"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750"
->txnstate id:buy5 port:9 value:"1"
->txnstate id:buy5 port:10 value:"0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84"
->txnstate id:buy5 port:11 value:"10"
->txninput id:buy5 coinid:0x20CA3F125EAC53242FCF7B0B91C8F6C5C9E6E8B746F14978AE227FEE94D81921
->txninput id:buy5 coinid:0xCD6DAC5B13E11C8D39C70F8DBE75EFAA6D90893B564FAE14DF0F6F6C1FF8CEA9
->txnoutput id:buy5 amount:10 address:0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8 tokenid:0x00 storestate:false
->txnoutput id:buy5 amount:10 address:0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84 tokenid:0x6EDC0FD2B761B85922386A57FB2B5C0FFE69EEF1CA2B7C210BB59D29D78DAF34 storestate:true
->txnbasics id:buy5
->txnsign id:buy5 publickey:0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750
->txnsign id:buy5 publickey:0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0
->txnpost id:buy5
`

------>txncheck ERROR
on the screen capture

--------> VAULT ADDRESS script
`
VAULT script  {
    "script":"RETURN MULTISIG(2 0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0 0xB5A82ADB68BB5204DC9CDB1B9C6218CF6E88B9C7B0BAA02B713D7E7E771E3625 0xCEA682FA3CF06907786993B7D8B8B73682EBA9AB20D255A78D2EC9A84ECDFA92)",
    "address":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8",
    "miniaddress":"MxG082H9WTY28ZRM5ENFT0M2PCERFV4GYCQDZDP7WY5YESVR41KAZV2R1M96Y1H",
    "simple":false,
    "default":false,
    "publickey":"0x00",
    "track":true
  }]
}
`


------------------------SPARTACUS TEST on minima-all.jar ------------------------------------
`
IF SIGNEDBY( PREVSTATE( 5 ) ) THEN

  LET vault = STATE ( 0 )
  LET dao = STATE ( 4 )
  LET price = PREVSTATE( 9 )
  LET buyer = STATE ( 10 )
  LET amount = STATE ( 11 )


  ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE)


  ASSERT VERIFYOUT( INC( @INPUT ) buyer amount/price @TOKENID TRUE )


  RETURN TRUE

ENDIF
`

--------> VAULT ADDRESS script
`
VAULT script  {
    "script":"RETURN MULTISIG(2 0xF4F8FA86AFE0781288E7A5625B5BD9395B8DFA04DD9D741F6C38E6FBA32CD8B0 0xB5A82ADB68BB5204DC9CDB1B9C6218CF6E88B9C7B0BAA02B713D7E7E771E3625 0xCEA682FA3CF06907786993B7D8B8B73682EBA9AB20D255A78D2EC9A84ECDFA92)",
    "address":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8",
    "miniaddress":"MxG082H9WTY28ZRM5ENFT0M2PCERFV4GYCQDZDP7WY5YESVR41KAZV2R1M96Y1H",
    "simple":false,
    "default":false,
    "publickey":"0x00",
    "track":true
  }]
}
`

`
-> tokencreate name:"CCC" amount:7000 decimals:0 state:{"0":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8","4":"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D","5":"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750","9":"1"} script:"IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT) buyer amount/price @TOKENID TRUE) RETURN TRUE ENDIF"
`

Minimas:
------coinid: 10 minimas: 0x921DE4A8B795EC614C774BE0C214CEB060B6D95AFF201158B1F5D5F0E8F50B65
------address 10 minimas: 0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D
------publickey: 0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750

Tokens:
------address where tokens are : 0x9547119C429F3545369A211E221DD7A1C1CA570B1C75A106B869DAE3811F74BF
------publickey : 0x5F549765118028EA41E57710FB500E23FE859AFEEE940C6F7DA9F5B17C3AE4D3
------tokenid: 0x86B170955606E8729FAFF4EC7C61EA6338A29BB478ADEC2CC92E35EEFBB08842
------coinid: tokens: 0xF63B1F2B17C031A02EEDB73CC2108C0482D4A767936183AF719F4EB82C96EC9D

`

`
-----> minima coins are on the same address (4) publickkey(5) so only 2 signtarures are needed
->txncreate id:buy6
->txnstate id:buy6 port:0 value:"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8"
->txnstate id:buy6 port:4 value:"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D"
->txnstate id:buy6 port:5 value:"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750"
->txnstate id:buy6 port:9 value:"1"
->txnstate id:buy6 port:10 value:"0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84"
->txnstate id:buy6 port:11 value:"10"
->txninput id:buy6 coinid:0x921DE4A8B795EC614C774BE0C214CEB060B6D95AFF201158B1F5D5F0E8F50B65
->txninput id:buy6 coinid:0xF63B1F2B17C031A02EEDB73CC2108C0482D4A767936183AF719F4EB82C96EC9D
->txnoutput id:buy6 amount:10 address:0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8 tokenid:0x00 storestate:false
->txnoutput id:buy6 amount:10 address:0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84 tokenid:0x86B170955606E8729FAFF4EC7C61EA6338A29BB478ADEC2CC92E35EEFBB08842 storestate:true
->txnbasics id:buy6
->txnsign id:buy6 publickey:0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750
->txnsign id:buy6 publickey:0x5F549765118028EA41E57710FB500E23FE859AFEEE940C6F7DA9F5B17C3AE4D3
->txnpost id:buy6
`

----------------------------- RESULT SPARTACUS TXCHECK ID:BUY6 -----------------------------------------
txncheck id:buy6
Minima @ 04/09/2022 13:52:10 [234.7 MB] : Token Script FAIL input:1 INST[0] - Contract   : IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT) buyer amount/price @TOKENID TRUE) RETURN TRUE ENDIF
INST[0] - Size       : 265
INST[0] - Transaction   : {"inputs":[{"coinid":"0x921DE4A8B795EC614C774BE0C214CEB060B6D95AFF201158B1F5D5F0E8F50B65","amount":"10","address":"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D","miniaddress":"MxG083R8Y3RZWN554F9KASS19S8MY5MM3Y3EUNBNB9B3FTPNDP50UC2BK71TSMY","tokenid":"0x00","token":null,"storestate":true,"state":[],"spent":false,"mmrentry":"59","created":"24750"},{"coinid":"0xF63B1F2B17C031A02EEDB73CC2108C0482D4A767936183AF719F4EB82C96EC9D","amount":"0.00000000000000000000000000000000000000007","address":"0x9547119C429F3545369A211E221DD7A1C1CA570B1C75A106B869DAE3811F74BF","miniaddress":"MxG084Y8S8PZGKV6Y2JD6H13ZH1RYT1Z755E2ZSEMGGDE39RBHZ27RKNTMEUF3U","tokenid":"0x86B170955606E8729FAFF4EC7C61EA6338A29BB478ADEC2CC92E35EEFBB08842","token":{"name":{"name":"CCC"},"coinid":"0xF63B1F2B17C031A02EEDB73CC2108C0482D4A767936183AF719F4EB82C96EC9D","total":"7000","decimals":0,"script":"IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT) buyer amount\/price @TOKENID TRUE) RETURN TRUE ENDIF","totalamount":"0.00000000000000000000000000000000000000007","scale":"44","created":"24731","tokenid":"0x86B170955606E8729FAFF4EC7C61EA6338A29BB478ADEC2CC92E35EEFBB08842"},"tokenamount":"7000","storestate":true,"state":[{"port":0,"type":1,"data":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8"},{"port":4,"type":1,"data":"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D"},{"port":5,"type":1,"data":"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750"},{"port":9,"type":2,"data":"1"}],"spent":false,"mmrentry":"57","created":"24731"}],"outputs":[{"coinid":"0x22B7F5BDEF45B989BB30BD2C43DA06BA10AE8B9FFEFD87E0A6816B90504423AC","amount":"10","address":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8","miniaddress":"MxG082H9WTY28ZRM5ENFT0M2PCERFV4GYCQDZDP7WY5YESVR41KAZV2R1M96Y1H","tokenid":"0x00","token":null,"storestate":false,"state":[],"spent":false,"mmrentry":"0","created":"0"},{"coinid":"0x22204F5A4A04C00DA08FFADD6E0E31FAE0B2C9FDA75FB6D8AEDC49E5411A9265","amount":"0.0000000000000000000000000000000000000000001","address":"0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84","miniaddress":"MxG085GS88UEG8TGJDE21Y4H8H2AQATPVHVFN1GUNGA63K8H3D9YM6VGHV5TZKB","tokenid":"0x86B170955606E8729FAFF4EC7C61EA6338A29BB478ADEC2CC92E35EEFBB08842","token":{"name":{"name":"CCC"},"coinid":"0xF63B1F2B17C031A02EEDB73CC2108C0482D4A767936183AF719F4EB82C96EC9D","total":"7000","decimals":0,"script":"IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT) buyer amount\/price @TOKENID TRUE) RETURN TRUE ENDIF","totalamount":"0.00000000000000000000000000000000000000007","scale":"44","created":"24731","tokenid":"0x86B170955606E8729FAFF4EC7C61EA6338A29BB478ADEC2CC92E35EEFBB08842"},"tokenamount":"10","storestate":true,"state":[],"spent":false,"mmrentry":"0","created":"0"}],"state":[{"port":0,"type":1,"data":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8"},{"port":4,"type":1,"data":"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D"},{"port":5,"type":1,"data":"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750"},{"port":9,"type":2,"data":"1"},{"port":10,"type":1,"data":"0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84"},{"port":11,"type":2,"data":"10"}],"linkhash":"0x00","transactionid":"0xBB51216E6F3FBB669597645BC3D438EE5B63BA67F58D4DCF3E177D444EA2CA13"}
INST[0] - Witness       : {"signatures":[{"signatures":[{"publickey":"0x1D9787DCCEC8B1F17753253C909D05B1AD04BDAD7171075A083CF79686CEBF3D","rootkey":"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750","proof":{"blocktime":"0","proof":[{"left":false,"data":{"data":"0xAD287FEF32AEAC55A49C3CEDC5D34207A7124D8509CE3F16F4721B64A02D9DF3","value":"0"}},{"left":false,"data":{"data":"0x48EAAB731678092519602A76123EF4E632727332E6CA90AEED1C518C91B1ECE8","value":"0"}},{"left":false,"data":{"data":"0x7D675D87058A34D0C75DBBB51BC9E89BA6CADF6C28B14CB2E2A22C9123EBD55C","value":"0"}},{"left":false,"data":{"data":"0xD646B6FF161726E414CC63DD365210E7A22AB1A0668D12A1FC8BC877DD80C578","value":"0"}},{"left":false,"data":{"data":"0x7B227063ABAFD2E92ADE5C5A0D9FA6F04925FA36BA2A4BD7EEF72D4CF87DD62E","value":"0"}},{"left":false,"data":{"data":"0x0BF15D6922FE0FC74E1A3F3C8FF684EB81C687D28DFC07EBEE5BDA357BA9E89C","value":"0"}}],"prooflength":6},"signature":"0x},{"publickey":"0x82074B8803D6D3BA7291CD09EC98E645AA46ECEBDB2631151BD7A13F677458F3","rootkey":"0xC61DAACC728A0D1D5DBEF1B21866B10BF212DA564341A1D5C4076D01B32C3F6D","proof":{"blocktime":"0","proof":[{"left":false,"data":{"data":"0x89D41AE9F36CC95A88D9F7045F1814A0EF9B1A2423336B2E4EA72288FC7F67CF","value":"0"}},{"left":false,"data":{"data":"0x886C1CBD339BC0A0BF17431E0930CB87853CD331C11DD55E839CF6984CBB07BD","value":"0"}},{"left":false,"data":{"data":"0x0179C1C2275FC2ACEF2AE49714F857F420AC3E5DB1994BBB30C13B283E9382A8","value":"0"}},{"left":false,"data":{"data":"0x884A8BA57D99D9D26C212646496ADB9F140A0FBEB230980B3FC4201E0C95105B","value":"0"}},{"left":false,"data":{"data":"0xAC1835293EBB1C19BA4AF1B9DF0D48E31F108308835B7B49D0E1ED6652475655","value":"0"}},{"left":false,"data":{"data":"0x5F15EFF688FC184462BEBAEA79C8FEA5ECF9E1EAC70139D75BAE09D71BE1ABA8","value":"0"}}],"prooflength":6},"signature":"0x},{"publickey":"0x8A7816529F3C578226550FE47318971E87862B5CED5CBD4FF36A01E5823685A2","rootkey":"0x41CE5F99B2AD5AACD08FC6C3200EC6150BDE95B0925907AC30BF62BC420044D7","proof":{"blocktime":"0","proof":[{"left":true,"data":{"data":"0xCB63C1408CB4B2F93D8F910D8336570BAA6E24B9A7D2C346A08A9EDF3AAD5DB3","value":"0"}},{"left":true,"data":{"data":"0x483D76A9D1B8BB7FBD7D2C1C15EB087BE0883708E6CB117631252E967F01D202","value":"0"}},{"left":true,"data":{"data":"0x664C6DC121E0F84059B0BD2DE44E2924904FB2C3EF931E58DEA693588F9A37BD","value":"0"}},{"left":false,"data":{"data":"0xA3EA529446BFA7BD9A20DA96B2F77475310BD9C2DE0541609E13512A18C487E9","value":"0"}},{"left":true,"data":{"data":"0xCD078A925D5678DFEA540243F3E9FEC89A7956246F396BFE9A5CFBE83D22FDEE","value":"0"}},{"left":false,"data":{"data":"0xC57404246A81849429D6A2EF9CD48F535B14AA9798E969E3BA806272915A6923","value":"0"}}],"prooflength":6},"signature":"0x704D22135973B73F49C5C52D752BFBB5B1F08F7760500DE2CBA4C4D42779495059A41372C1B5B9B5874862FC4ADFF1BAE658126B0345B7AAF4AB25240E76603B80869DED237CCFE8A0EB5FDD1736FBF2DD1E44C1EFC196DC0C8FF1B5FA72BCD5C6E2BBD98E4849A5FB226C8D4DA6A6F0F19F5F1C19347960F1F23F9DD92EE1816FC5C88843A6C5E2AAE36E08A5F688FA4B7C0D6E2DE0C7AA7B548995A1191811DED8961B709FE120C5E71C752AF8B8BFA9EE70BF7E74500390C6D9C7D0000E49FCA1E7945FB49EDED68E3DEDDC72E5E290295D5B04020E8FA9DB0EBA1BAAA53A2D3DCABDDAADD50AF20BC65833ED009575FE4D3F5DCBD7EE7F4463C47EE4AA6497690D364C35B3F40A7265C0F76B00042B75124FF587779FF6B246904BF50AD6D0F5DD0A0295E38F677B38BA597BC39C94DBB13D53204D3DC5A7DCA4782E7D46580CAC0BBDDD2A24D8E4E8036D908FC7A621E2D17DE3F9346185C2B23DECD5AD5C4D2BF931FED2A41C05F48EB1D1836E2205345EC768F47DB441C7F76A851CA451FF81211A07E3A0A13FA3E5C662C8C4C4DCF380E9584456685B1B56010E60F628985643F5580E1A97EF7668E42B1F79754F7FEA0D81AFCC5C698FA6D40CADE0C665CAFB8022EDA7075F7B05FFB853BAB7DADBA10E6D19F0CD9FD0886C561A3061106ED12545E2D88D2DAD848B2D32B333639057ADFFFF0B3CAEBE719593E3C4F945955202952FD89AA31AD4117736DFBD13B7DFFA5B843EB98079964474CA04DC41288590BA7B318984E1DE3029EE2705D47233080CC3B48A655287E59844688987190FCDE3D57FDE6BC7B07CA53031C559515C6901562BE8B7456FE6A63C6459A01419241751A36880EE4852651504B78C941F949980527867A399C0B76CDB9DAFB53A17D6457BCA52BE196768A46C98106CD9602A25E98FE84077A692B2EBF17CE052669676FB85DD9DCD54F11EEDEA25CEB12DC7B1957019CB259FC3FD00E9E124E94E3AABD7817A7611CBCA64F017C9CB3E6EE3D8B0E7DF4F3DED3A7BC6AA823C253F8448FF5C7E69F01D82DE0E275481FC434426F4F608B04F9C96639836611EB783369B4C3350EE617CC51C3927935E8F73BDCE1A09FCB8E290F4AAA60FADCA6DFD74AE720368A8D764D1F25EF7BA05C216A9B0B7F0D179D65E850B71CEC215D3D7C83274805374E97E65C47BDE0DEA74C4EA10FE9F6BC79EC19BBD6317132CC009D3B5CAD9A7185FCE81939DA9B00391530451EA85A9EFC3827ECF643A1EB8D07CE93697425212D28502623A1E20200EA4F3A9E309DBB4E81644925E98886EDF1F135E7B61E1B4212B9551A53BE2E58D3013DD932485B076979B4D3347AE1F367BC3B1FB8943FB755173001D150C5E9B3169ABC64E70CA3B521A4B51E709C76C7965264F9F5316B9FE43428AC6EBF542A277B37B98C5E44F9599032DFA0B49A89AEFBF541E1B6E3977AB3B1E9F9DF2D76299692FCF590847DB4675695CA0A64439943B34DA2B42A7BD54CFADD94CD4ADD66DEB768E7C1221E912DFF1"}]},{"signatures":[{"publickey":"0x094C2875445A065EC9F40EAA28110EE655E04EBD151299A97F99353645ACB4FF","rootkey":"0x5F549765118028EA41E57710FB500E23FE859AFEEE940C6F7DA9F5B17C3AE4D3","proof":{"blocktime":"0","proof":[{"left":false,"data":{"data":"0x7735F983E9F88124BB87A9A7575E91C57942157C3CF0333B370702E43AF4A754","value":"0"}},{"left":false,"data":{"data":"0x46799C87427DEE315D5A0BCE713D64BBEE2731F4514DBD2BDBBB6467D0293E94","value":"0"}},{"left":false,"data":{"data":"0xC1BD94593F616DAE105F69A5CEF70A7338DBF4D1BEB7ABD8C7C4A50A74BC4529","value":"0"}},{"left":false,"data":{"data":"0x66B41FB4D7926EF83AB92CFAB684D21F554E25E520873D8CC0C8CA7B7D8CAA19","value":"0"}},{"left":false,"data":{"data":"0x7FB74C6F8305E4B9E9781527B293EDECD4FEAF772DC17C0ED0A419270E08FC4A","value":"0"}},{"left":false,"data":{"data":"0xDED69F4A2EC60C6D6DC5BCA9D050C1A5B058A6E7B40EAEC8FC8C05F814BE78AC","value":"0"}}],"prooflength":6},"signature":"0x54618B4CA56FA0498DAF1E04E44D7B636CB4AAF491CBD2FF7AA74339F4D218B628895D43F939D5BE7390C0EAC614F1DF849C0FE3BE15DAF262D2A43D40086FC5B46371AF3BB4AF9793D14ADAC9ECF5675C8C0E20A32014CC849201466AE9EB7F31D024B719B0A9F7E60089BFBBA0F6610BD5EE498265550B4BDC1D7A8395D3F6919E058873D3471A83F8B7F6266444252DD94F0A547852391A8153E4F7111D01451876424392771744C4B6268228CAEBB562D9066E9716E4C22A6EDB333FDC453C1771F346D46B1AA876FD054497ECE13331C0AE8C90E7EB491139E15962A45E64128EA609BEE4B80B28348DD6CB5D21F1AA58ABA09A6FD3171673444AD9A97F61A91E99918994A0B46A3418B9B0E26F1701CF1C8AC5F312E3A6746BEE0A41057EC607092BDCB0422EA41BEDE8B7F4D8C45160F66AACE732A1C8B33E6B93B72319C2C0149705B68042627E2146279F10B4EFD24ECC3D465A60555964DD6E6B1383447DA729CE60B4DBEB3E7247430585A86B0EB37F5FE33BFD0B227BCC1F6ABF635E25FA1F2F2EA727A14CEFDD43E2F2937A5A32833EA39A3CE8E5BE037689F2D3DC7B8320545064CA8402F560A21D588780A831AB3A5EC2B5390DD9C1832CEE3397F4FF6B2927AFC1D2907671A5C1CCB3D8322CB15CAB421AC7D4809140C7F2E1D1BFB8DC08B65C70594AE963B0BE028CFC75A8E4280D7A9E783D439C089059921D6FB63D041A04210117361180CAEE3FF5D5B860ECFA69B19EDA37DF5647CE17B12105F920AAF82B48C270BCE742474F6B2B21ECE12A5B9D58E4D01CDDD42783BB84198264AB4E0280753C7C22DF06C20C17A8CA13ECF8DAD648930EE9C46A2F8F95638AA0B8C747161C7828C25BB88815A11EC09F02C14C38E9EEEE8224E7C0FFFBF92C685085EBE796024E66DD324C39E48988E57B4794D8A929E77792CB98CF257FB5FF4022A43E7EC3ACE5A0B8B3B14F10C6237BE3C8291442341E8967D27AC4C3B9E097E6296A2D9A163062F697427B637C77E653A7BC41635A6C5BB862BED87276FB83306E174BABE3EBF779A01D3EC54C0F40BF930B775EEA3231DAEA7CFCC841A64A998E85C206AF21A4B7D290A5AC9275DAE674D249084A35E472724D9D0E2445E9EDB951CC3676E072BB5F4258E69A1F761B32EA6A9FDFFD2C277433C3D9D6B30E56A9BA7DD7CFDB24B56944D5BCD4882224A9B03C6F563B83D412F3C5041AE9049352CE5FB2103783AB43785C1A7859B19FF0572909E77E70FD282C0FEEA74B335A5A1EB3680BA7FB5973894DA184D76F766470A6346BFD49DC542C9483AD3DD0A4528EE01DF61AED12D610E978F413AD91DA94A61BB7E13C0E3A7A5A0A8CA5B3209975AA19DFBF552C3B3476FFA31E5E42F77299E2443E3770B9F5BD2BAD25D13A4A10A8BD6C1764B4A0C351AB78835ACD02CAFFBA2BDBD125415C108466E65C8319E92F1AD8C689904AC6D4A14C876A047347ACE4A652D3974A0DCEBA74731AA10CB97002428502DC2BE540AE265238C16548834DBCEBDB19"},{"publickey":"0xCF43F53BE1FB482A1B9CD4DD032577012512C9F40DB0AD32BD9F265158A48D27","rootkey":"0xBB77E44ED3FF31809D46AA63D01DC2487DF264D15179D1072067E3B1113C8D59","proof":{"blocktime":"0","proof":[{"left":false,"data":{"data":"0xC4BEF8F6F1C85978B462B85C7837C7DBFEED3F82B0CC763E50CA289852F53401","value":"0"}},{"left":false,"data":{"data":"0x54A937E99C19DF35B3112100C2A48AEE2A6CB80366FB15D21F963AB763E6AE89","value":"0"}},{"left":false,"data":{"data":"0x1760D23AE0A78CFCD8FCE2B9E87354310FF4FFAA91B8670003A96BCA5B2FDEC7","value":"0"}},{"left":false,"data":{"data":"0x80B13D7FB712940AC1B9FBC0DAFCA70D7C5FAECB569659BF6E203D5DCAC6872A","value":"0"}},{"left":false,"data":{"data":"0xABA44224A8A2AB3D9E83ECFB045195C14ADD54E559B39489DD7410E8439B38D7","value":"0"}},{"left":false,"data":{"data":"0xEA6068B6FE2D2D20DAC3D82F79AC37717593A4E14526494E6CE9148C9699CC93","value":"0"}}],"prooflength":6},"signature":"0x29B1A71C4C996C1C901272944E5B1075E47473DCD9E84F7C120DC15548D86B0017814A8839BEE666EF9D36773C446C264EAC65F236AB8E202A89BB64BA2B85634B1125E41E83D39F484BC9DC912C801D3A5F6A8A20CD47A16EE944BBEE4F3A989ED8C09A4295D26719FA7649675FB19A7A786D7E6C811636BB43802E932E815DB5BFAD6EC897C1829639BFDC3A503C5988F17FB6E333861DFEE07073AA2E2E5AF8FFC498DF86C00B427E5A805D77FB4823569B1CFD50C1B98A8BEFD8A33B934DAC710E1AFFBB25C7E9E801C9643B28D5720DC2C16A964A69755D4934B637052F48DD753969E21C797193144E057A8E2CEF4E13C858ACAB908547BE9CC7A3786295B57016248B9ED8ADBED921B0897363CDF87B38134BC9A0D1384D5F73525F5183DA22203BAE3FAEFC0267AB42596CA643C397BA7E6B7E3802FB6890772CD7F522D5E68BBB21D4B4322B27D18599E60D7F91082F29E470EA154B63C55E7F241CF5A31ECC336FCAEBF7102D4B77DE40DFE5E0588967AF9FB9D9BCBCD17555E138578FBA768DF297F21174D29FADBECE83CD94747C7557C39F8B9AF64793CC39931274F88F2F239D9C83E84F5C8AF925D663D5E9806CB78584BAC89C9A3D9CEB93E0DCAFDF8B35C6A04A8897CA039DE4CCEC5A52CD056108B4FB702E73C7D7395D5D3BDCAF3FA944FA30F8FFD731D5165B04CD9091D2D1808FAD5569F00257CE0D3F87FFB4A1AC9EA1639A65B758FF720D5F4C981B199995782DEAA371DA374A80B7B8DD0E758E7DAD429177189FBF1E1D1F1BA3DBD3CD10EA7433B03A2176BF291E2C89908D361AE6AA89652FD893A7C9725F5BD39F68DE75D2B4F3432B04B1411B29A633D346A66AA84C59DB668E03D1F28E1D511DB10E0BB15B1C06BDD930B83DAC2EB1365175572F5128FCA6D147668F791D3A6723183ED34A0119972D3A9AD106C1ED2155AF5BE6045053B1337FA041C1ABE5CB1DFD94AA3525208E07337C26C4F4DFC7675A55FFF0872BF1B2CEABF5C2382D66A4A6046BF322C6EAD3DB305631AC82B2E45AB1EFA640CB338ACCE2A8A8A48C0CA1C90042CD56B2DD7DDA169DC7C4085B181D11788E072732F7B140EF41CD10CDBCBE3F7DCD30C1676F43A7EBB5ACADECD30AE00D31ED98296AFBB96367CFE25513B461E46AA437AD2FFD1B51650F58646F2D029F5C8BCE4155CFD9CB51269B77B82EAE38B30E9E415B4EF9AE88ECB8DFFA26A70B801AE195BDF175849A3617C0111277C1B2625E7721A9FEF81A385B82FAFB90582450A91190BDBFC432AC3052A0850FD16A858AF89F4022EC045B6BE25B8F4E060D801371305C44620FBE1B2D5C25057706E023F6C77D8E01A03076481413B2E8A7747348BA6BDA732EFDE0F2B335B478AB805E771AC564C78F5BA7284DD6758C69E654A352BC0666382DA767EF27E7700A19C0CFF621C192FF41E86DEB387CE634C20021ABF913810366D7DCC3EBBE1CF8915F5707325B7F627B79876491788F5F1687EA8370831806C33FFFD11A3465FA08A2D8CDF776"},{"publickey":"0xEF7BBE90C05F2FFA338D4AB28111193C44ED00B668415121D57DFCB36F6201D6","rootkey":"0x8BB69BB957F0B3D4FBDA35A88365B83A6563BC4BB3BED2242D92E836E6AED094","proof":{"blocktime":"0","proof":[{"left":true,"data":{"data":"0x11BF7BA0D00CCF384091667E3347610E2B1BC2CDF604A1E55E548B91D9B98EA6","value":"0"}},{"left":false,"data":{"data":"0x4A893194C7332FA95BF5340B3BFC2F7484CC6F52212947940071E46502AEEB9E","value":"0"}},{"left":true,"data":{"data":"0xE2E82F26A5F634AC16C6D636266C333290F66E2B5997495596D91AA478989893","value":"0"}},{"left":false,"data":{"data":"0xA5796E56A1227639FC501A94010D9310E4D76D7DE0DE8B60715DC7C56FC90836","value":"0"}},{"left":false,"data":{"data":"0x8E8F2F96643CC92C7055B2890A919860A0B2BCBFE168E22CD6045AFB691BBF4A","value":"0"}},{"left":false,"data":{"data":"0x0FE07366BEB7C0A54DCD25C4BF30FAF26CB496FE3912A96F60C79E8B61F62560","value":"0"}}],"prooflength":6},"signature":"0xA33719CED0B3FE583729D804A42DC53FD9D5A93B41D6A829CD6D91A6C3760290A9CE2D215E483AF3F645700B9EDC61A462AC5E9E18320EBFB80B379E90D7AC13F22EF0D1ED4556BC060787ED61103EB08D5E1478E086EFEE11C3998C25FB855532E6E6838F6CF343DE66CE33E5791797C066F48AE62334FDBCB80DB0A20545ACB384C7E877156BD9F5A04C9131296FD02CCBF12ABCBE2E713B95B81A5E17D75C0F6C862C6745CAD300C80270476E81B49B2ADBB785A9BBA88700814AFEE18473772A03EA0388D36B5DD8DA11C5C4B666E01C7AC69C10E211F37F8AC9A599E7661891CE15AFDC7756E4C71E0E321B32C5D8754BB22372C661C19C14DE6F9F3BB608A00D928122FABD0A5B95A7389D209859932124758C491FA5F6B46DD29A2C53758D8805F53882BAF0C38950B6365CCC852F2190ECACD3004479F90146BD96B2E1588FBD3FD0B5D029284D498DEAD0177E0BAA6D9BA658F4E73FEFC57F6C430539D6C78F0BD5471EC878FB55B86790706E7CC49AF4B8114666AFE25C3E366BD7BF1ABAA557D4394B30A2C19C60A7411D8FBBFDDA5D928F33DBB0835A8BE3379FF1346F9595BC17ABD59BFEF78390E2D9A9D14E9BC0CB2913046FC92C7E1B8A5355E177C88245997083159100D530EDBEE4855B27DB7CD828FF0063882E2C11830437D6710376F1ADFD4AF2F9777CA2F888E29B2D69A7A581BA00A20D2418C62093177CF9931246CB0F19FDB50DBE87E76962D9EC86341D76E7715F8B577F6B13D2164773D902616BB5DBB1B9CE80A68D8E2389A870C00A515B44010DED70DCAF1FB4E476D6A60AFFFED45E0C9047E94CBD233141421668DCEE8D2CF44D6C3FD9FB706D88103CC3ED775E5EE0BE247D5409A433BD0033619A862B9957C1293227C82F8DFCAA4F15378DBF4CCA0D0530FC62F85F98DFC94B8801127B46C6AD1123C1B96454609F05F507223591D22A94E8C4761AB0C1A131028D7FC4B1D45D43DBE51915D3D78DD65752E1A612BCF7031834F41AF50E445994DCD24807E0BD99B7E915DF211EBF9A627970060340A137F1E73690FC54E350FC547056B41518DCA51C56AAAEEF8D4D1562650D53C5C380AB8ADFAB27FB331CAC8BCED1D766CFA23D7D2AC1A74A7EFD3688B55C96D4FA1DA54FE165711200D6DFA2D1D98B989C113677CEC157A0BC63EBA64CA4933297D430CB8C5C3FDBA9178DDE356F04D48293FC767F61E538E69381851C45ACDCA7D358B841C9C44DD87386550D5F69B4C7ECBF4ACF30E9C8BDD91FFE3545672130BD24A4A5647951D8A1EF9CF1D82C8C7BF345E67D48D5E6A4E886CA9A05897B6ACD6333F54FBDF7A3CA0B19F8BE2114FD63565BEEFB211B9F8B3DFDEDB35895DB618E67C84C502C1D4CE1486AC764A3D6916288F2E6EBF7ADD396973AEB460D42C9EF8BD56FBD2F27722D2AE06E4985D0B90F221FD7348D39DD8937B4B7281EAEE38BACC024743AD4C8C3AFE626130D680898F09A48C8C56D0329916089B8F22DBF8847D4F5E62F52A58FF7CE6C049815D698"}]}],"mmrproofs":[{"coin":{"coinid":"0x921DE4A8B795EC614C774BE0C214CEB060B6D95AFF201158B1F5D5F0E8F50B65","amount":"10","address":"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D","miniaddress":"MxG083R8Y3RZWN554F9KASS19S8MY5MM3Y3EUNBNB9B3FTPNDP50UC2BK71TSMY","tokenid":"0x00","token":null,"storestate":true,"state":[],"spent":false,"mmrentry":"59","created":"24750"},"proof":{"blocktime":"24867","proof":[{"left":true,"data":{"data":"0x3982C88580BA953439EDB11B3584B8A079953D3B498DEEEDB7652DB3A2BA14A7","value":"9.99999999999999999999999999999999999999993"}},{"left":true,"data":{"data":"0xAFE57A5D42EEEF490E69A2C6547BEC2013DCB06B8686EFD70892CDB3C1F721A0","value":"0.00000000000000000000000000000000000000007"}}],"prooflength":2}},{"coin":{"coinid":"0xF63B1F2B17C031A02EEDB73CC2108C0482D4A767936183AF719F4EB82C96EC9D","amount":"0.00000000000000000000000000000000000000007","address":"0x9547119C429F3545369A211E221DD7A1C1CA570B1C75A106B869DAE3811F74BF","miniaddress":"MxG084Y8S8PZGKV6Y2JD6H13ZH1RYT1Z755E2ZSEMGGDE39RBHZ27RKNTMEUF3U","tokenid":"0x86B170955606E8729FAFF4EC7C61EA6338A29BB478ADEC2CC92E35EEFBB08842","token":{"name":{"name":"CCC"},"coinid":"0xF63B1F2B17C031A02EEDB73CC2108C0482D4A767936183AF719F4EB82C96EC9D","total":"7000","decimals":0,"script":"IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT) buyer amount\/price @TOKENID TRUE) RETURN TRUE ENDIF","totalamount":"0.00000000000000000000000000000000000000007","scale":"44","created":"24731","tokenid":"0x86B170955606E8729FAFF4EC7C61EA6338A29BB478ADEC2CC92E35EEFBB08842"},"tokenamount":"7000","storestate":true,"state":[{"port":0,"type":1,"data":"0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8"},{"port":4,"type":1,"data":"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D"},{"port":5,"type":1,"data":"0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750"},{"port":9,"type":2,"data":"1"}],"spent":false,"mmrentry":"57","created":"24731"},"proof":{"blocktime":"24867","proof":[{"left":true,"data":{"data":"0x38D57CBB7A92124BB59F0B7D6C62AB943E29E1194203F94648DCC1ED836A5BE4","value":"0"}},{"left":false,"data":{"data":"0x6A7737D9658BAED7990EB8EBB18EED9BC7B84BE58545906E73793D512CFD1BEA","value":"19.99999999999999999999999999999999999999993"}}],"prooflength":2}}],"scripts":[{"script":"RETURN SIGNEDBY(0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750)","address":"0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D","proof":{"blocktime":"0","proof":[],"prooflength":0}},{"script":"RETURN SIGNEDBY(0x5F549765118028EA41E57710FB500E23FE859AFEEE940C6F7DA9F5B17C3AE4D3)","address":"0x9547119C429F3545369A211E221DD7A1C1CA570B1C75A106B869DAE3811F74BF","proof":{"blocktime":"0","proof":[],"prooflength":0}}]}
INST[0] - Signature : 0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750
INST[0] - Signature : 0x5F549765118028EA41E57710FB500E23FE859AFEEE940C6F7DA9F5B17C3AE4D3
INST[0] - State[0] : 0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8
INST[0] - State[4] : 0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D
INST[0] - State[5] : 0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750
INST[0] - State[9] : 1
INST[0] - State[10] : 0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84
INST[0] - State[11] : 10
INST[0] - PrevState[0] : 0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8
INST[0] - PrevState[4] : 0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D
INST[0] - PrevState[5] : 0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750
INST[0] - PrevState[9] : 1
INST[0] - 0) Token : [COMMAND] IF
INST[0] - 1) Token : [FUNCTION] SIGNEDBY
INST[0] - 2) Token : [OPENBRACKET] (
INST[0] - 3) Token : [FUNCTION] PREVSTATE
INST[0] - 4) Token : [OPENBRACKET] (
INST[0] - 5) Token : [VALUE] 5
INST[0] - 6) Token : [CLOSEBRACKET] )
INST[0] - 7) Token : [CLOSEBRACKET] )
INST[0] - 8) Token : [COMMAND] THEN
INST[0] - 9) Token : [COMMAND] LET
INST[0] - 10) Token : [VARIABLE] vault
INST[0] - 11) Token : [OPERATOR] =
INST[0] - 12) Token : [FUNCTION] STATE
INST[0] - 13) Token : [OPENBRACKET] (
INST[0] - 14) Token : [VALUE] 0
INST[0] - 15) Token : [CLOSEBRACKET] )
INST[0] - 16) Token : [COMMAND] LET
INST[0] - 17) Token : [VARIABLE] dao
INST[0] - 18) Token : [OPERATOR] =
INST[0] - 19) Token : [FUNCTION] STATE
INST[0] - 20) Token : [OPENBRACKET] (
INST[0] - 21) Token : [VALUE] 4
INST[0] - 22) Token : [CLOSEBRACKET] )
INST[0] - 23) Token : [COMMAND] LET
INST[0] - 24) Token : [VARIABLE] price
INST[0] - 25) Token : [OPERATOR] =
INST[0] - 26) Token : [FUNCTION] PREVSTATE
INST[0] - 27) Token : [OPENBRACKET] (
INST[0] - 28) Token : [VALUE] 9
INST[0] - 29) Token : [CLOSEBRACKET] )
INST[0] - 30) Token : [COMMAND] LET
INST[0] - 31) Token : [VARIABLE] buyer
INST[0] - 32) Token : [OPERATOR] =
INST[0] - 33) Token : [FUNCTION] STATE
INST[0] - 34) Token : [OPENBRACKET] (
INST[0] - 35) Token : [VALUE] 10
INST[0] - 36) Token : [CLOSEBRACKET] )
INST[0] - 37) Token : [COMMAND] LET
INST[0] - 38) Token : [VARIABLE] amount
INST[0] - 39) Token : [OPERATOR] =
INST[0] - 40) Token : [FUNCTION] STATE
INST[0] - 41) Token : [OPENBRACKET] (
INST[0] - 42) Token : [VALUE] 11
INST[0] - 43) Token : [CLOSEBRACKET] )
INST[0] - 44) Token : [COMMAND] ASSERT
INST[0] - 45) Token : [FUNCTION] VERIFYOUT
INST[0] - 46) Token : [OPENBRACKET] (
INST[0] - 47) Token : [GLOBAL] @INPUT
INST[0] - 48) Token : [VARIABLE] vault
INST[0] - 49) Token : [VARIABLE] amount
INST[0] - 50) Token : [OPERATOR] *
INST[0] - 51) Token : [VARIABLE] price
INST[0] - 52) Token : [VALUE] 0x00
INST[0] - 53) Token : [TRUE] TRUE
INST[0] - 54) Token : [CLOSEBRACKET] )
INST[0] - 55) Token : [COMMAND] ASSERT
INST[0] - 56) Token : [FUNCTION] VERIFYOUT
INST[0] - 57) Token : [OPENBRACKET] (
INST[0] - 58) Token : [FUNCTION] INC
INST[0] - 59) Token : [OPENBRACKET] (
INST[0] - 60) Token : [GLOBAL] @INPUT
INST[0] - 61) Token : [CLOSEBRACKET] )
INST[0] - 62) Token : [VARIABLE] buyer
INST[0] - 63) Token : [VARIABLE] amount
INST[0] - 64) Token : [OPERATOR] /
INST[0] - 65) Token : [VARIABLE] price
INST[0] - 66) Token : [GLOBAL] @TOKENID
INST[0] - 67) Token : [TRUE] TRUE
INST[0] - 68) Token : [CLOSEBRACKET] )
INST[0] - 69) Token : [COMMAND] RETURN
INST[0] - 70) Token : [TRUE] TRUE
INST[0] - 71) Token : [COMMAND] ENDIF
INST[0] - Script token parse OK.
INST[0] - Global [@BLOCK] : 24879
INST[0] - Global [@BLOCKMILLI] : 1662292287763
INST[0] - Global [@CREATED] : 24731
INST[0] - Global [@COINAGE] : 148
INST[0] - Global [@INPUT] : 1
INST[0] - Global [@COINID] : 0xF63B1F2B17C031A02EEDB73CC2108C0482D4A767936183AF719F4EB82C96EC9D
INST[0] - Global [@AMOUNT] : 0.00000000000000000000000000000000000000007
INST[0] - Global [@ADDRESS] : 0x9547119C429F3545369A211E221DD7A1C1CA570B1C75A106B869DAE3811F74BF
INST[0] - Global [@TOKENID] : 0x86B170955606E8729FAFF4EC7C61EA6338A29BB478ADEC2CC92E35EEFBB08842
INST[0] - Global [@SCRIPT] : IF SIGNEDBY(PREVSTATE(5)) THEN LET vault=STATE(0) LET dao=STATE(4) LET price=PREVSTATE(9) LET buyer=STATE(10) LET amount=STATE(11) ASSERT VERIFYOUT(@INPUT vault amount*price 0x00 TRUE) ASSERT VERIFYOUT(INC(@INPUT) buyer amount/price @TOKENID TRUE) RETURN TRUE ENDIF
INST[0] - Global [@TOTIN] : 2
INST[0] - Global [@TOTOUT] : 2
INST[0] - Start executing the contract
INST[1] - IF function:SIGNEDBY, params:[function:PREVSTATE, params:[5]]
INST[3] - function:PREVSTATE, params:[5] returns:0x2FDE9021C9ADEADB15E86BAEAAF7D3B50F39C06B4EB5D9BDEA0CF2407F70C750
INST[3] - function:SIGNEDBY, params:[function:PREVSTATE, params:[5]] returns:TRUE
INST[4] - LET vault = function:STATE, params:[0]
INST[5] - function:STATE, params:[0] returns:0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8
INST[5] - { vault = 0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8, }
INST[6] - LET dao = function:STATE, params:[4]
INST[7] - function:STATE, params:[4] returns:0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D
INST[7] - { dao = 0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D, vault = 0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8, }
INST[8] - LET price = function:PREVSTATE, params:[9]
INST[9] - function:PREVSTATE, params:[9] returns:1
INST[9] - { dao = 0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D, vault = 0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8, price = 1, }
INST[10] - LET buyer = function:STATE, params:[10]
INST[11] - function:STATE, params:[10] returns:0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84
INST[11] - { dao = 0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D, vault = 0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8, buyer = 0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84, price = 1, }
INST[12] - LET amount = function:STATE, params:[11]
INST[13] - function:STATE, params:[11] returns:10
INST[13] - { dao = 0x7B4547BC4AE5291E9A2B9C0A788B54B6B0EA377AEBBAD2B1BFB9BB725079825D, amount = 10, vault = 0x514CBB51231BB15D77F4161658EDBFE48559A6E1B93CAA5ABB9FD9034563E2D8, buyer = 0xB0E211E7411D84DAE106A48A2225695DCFE3F7DC30F5E0A30E8888DA9AD8DF84, price = 1, }
INST[14] - ASSERT function:VERIFYOUT, params:[global:@INPUT, variable:vault, ( variable:amount * variable:price ), 0x00, TRUE]
INST[16] - ( variable:amount * variable:price ) returns:10
INST[16] - function:VERIFYOUT, params:[global:@INPUT, variable:vault, ( variable:amount * variable:price ), 0x00, TRUE] returns:FALSE
INST[16] - Contract instructions : 16
INST[16] - Contract finished     : false

{
  "command":"txncheck",
  "params":{
    "id":"buy6"
  },
  "status":true,
  "pending":false,
  "response":{
    "coins":[{
      "tokenid":"0x00",
      "input":"10",
      "output":"10",
      "difference":"0"
    },
    {
      "tokenid":"0x86B170955606E8729FAFF4EC7C61EA6338A29BB478ADEC2CC92E35EEFBB08842",
      "input":"0.00000000000000000000000000000000000000007",
      "output":"0.0000000000000000000000000000000000000000001",
      "difference":"0.0000000000000000000000000000000000000000699"
    }],
    "tokens":2,
    "inputs":2,
    "outputs":2,
    "burn":"0.0000000000000000000000000000000000000000699",
    "validamounts":true,
    "signatures":2,
    "valid":{
      "basic":true,
      "signatures":true,
      "mmrproofs":true,
      "scripts":false
    }
  }
}







https://telegram.me/manybot
https://medium.com/javarevisited/sending-a-message-to-a-telegram-channel-the-easy-way-eb0a0b32968
https://www.dignited.com/25296/how-to-create-telegram-bot-for-telegram-channel/
          https://api.telegram.org/bot[BOT_API_KEY]/sendMessage?chat_id=[MY_CHANNEL_NAME]&text=[MY_MESSAGE_TEXT]

          https://api.telegram.org/bot5743770519:AAEVKbcOafrfbd2bRPXMFH09EbBxYyDcTe4/sendMessage?chat_id=@minima_test2&text=ieeeep_newTOKEN
